<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $employee_id = trim($_POST['employee_id'] ?? '');
    $first_name = trim($_POST['first_name'] ?? '');
    $last_name = trim($_POST['last_name'] ?? '');
    $email = trim($_POST['email'] ?? '');

    $errors = [];

    // Basic validation
    if (!$employee_id) $errors[] = "Employee ID is required.";
    if (!$first_name) $errors[] = "First Name is required.";
    if (!$last_name) $errors[] = "Last Name is required.";
    if (!$email) $errors[] = "Email is required.";

    if (empty($errors)) {
        try {
            // Create user
            $userId = $userManager->createUser([
                'employee_id' => $employee_id,
                'first_name' => $first_name,
                'last_name' => $last_name,
                'email' => $email,
                'status' => 'active'
            ]);
            $_SESSION['message'] = "User added successfully.";
            $_SESSION['message_type'] = "success";

            header("Location: users.php");
            exit;
        } catch (Exception $e) {
            $errors[] = "Error adding user: " . $e->getMessage();
        }
    }
}
?>

<?php include 'templates/header.php'; ?>

<div class="container mt-4">
    <h2>Add New User</h2>
    <?php if (!empty($errors)): ?>
        <div class="alert alert-danger">
            <ul>
            <?php foreach ($errors as $error): ?>
                <li><?= htmlspecialchars($error) ?></li>
            <?php endforeach; ?>
            </ul>
        </div>
    <?php endif; ?>

    <form action="add_user.php" method="POST">
        <div class="mb-3">
            <label for="employee_id" class="form-label">Employee ID</label>
            <input type="text" id="employee_id" name="employee_id" class="form-control" required value="<?= htmlspecialchars($_POST['employee_id'] ?? '') ?>">
        </div>
        <div class="mb-3">
            <label for="first_name" class="form-label">First Name</label>
            <input type="text" id="first_name" name="first_name" class="form-control" required value="<?= htmlspecialchars($_POST['first_name'] ?? '') ?>">
        </div>
        <div class="mb-3">
            <label for="last_name" class="form-label">Last Name</label>
            <input type="text" id="last_name" name="last_name" class="form-control" required value="<?= htmlspecialchars($_POST['last_name'] ?? '') ?>">
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" id="email" name="email" class="form-control" required value="<?= htmlspecialchars($_POST['email'] ?? '') ?>">
        </div>
        <button type="submit" class="btn btn-primary">Add User</button>
        <a href="users.php" class="btn btn-secondary">Cancel</a>
    </form>
</div>

<?php include 'templates/footer.php'; ?>

<?php
require_once 'config/database.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $account_id = intval($_POST['account_id']);
    $role_account_id = intval($_POST['role_account_id']);
    if ($account_id > 0 && $role_account_id > 0) {
        $stmt = $db->prepare("UPDATE uncorrelated_accounts SET role_account_id = ? WHERE id = ?");
        $stmt->execute([$role_account_id, $account_id]);
        header('Location: index.php');
        exit;
    }
}
header('Location: index.php');
exit;
<?php
require_once 'config/database.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $name = trim($_POST['role_name'] ?? '');
    $desc = trim($_POST['role_desc'] ?? '');
    if ($name !== '') {
        $stmt = $db->prepare("INSERT INTO role_accounts (name, description) VALUES (?, ?)");
        $stmt->execute([$name, $desc]);
    }
}
header('Location: index.php');
exit;
<?php
header('Content-Type: application/json');

$response = ['success' => false];

try {
    if (!isset($_POST['file_path'])) {
        throw new Exception('File path not provided');
    }

    $filePath = $_POST['file_path'];
    $hasHeaders = isset($_POST['has_headers']) && $_POST['has_headers'] === '1';

    // Security checks
    if (empty($filePath)) {
        throw new Exception('File path is empty');
    }

    if (!file_exists($filePath)) {
        throw new Exception('File does not exist at: ' . $filePath);
    }

    if (!is_readable($filePath)) {
        throw new Exception('File is not readable');
    }

    // Open the file
    $file = fopen($filePath, 'r');
    if (!$file) {
        throw new Exception('Could not open file');
    }

    // Read the first line
    $firstLine = fgets($file);
    fclose($file);

    if ($firstLine === false) {
        throw new Exception('Could not read file contents');
    }

    // Parse CSV line
    $headers = str_getcsv($firstLine);

    if (!is_array($headers)) {
        throw new Exception('Could not parse CSV headers');
    }

    // Trim whitespace from headers
    $headers = array_map('trim', $headers);

    // If no headers, generate default column names
    if (!$hasHeaders) {
        $headers = array_map(function($i) {
            return 'column_' . ($i + 1);
        }, array_keys($headers));
    }

    $response = [
        'success' => true,
        'headers' => $headers
    ];

} catch (Exception $e) {
    $response = [
        'success' => false,
        'error' => $e->getMessage()
    ];
}

echo json_encode($response);
exit;<?php
require_once 'config/database.php';
require_once 'connectors/XMLConnector.php';

header('Content-Type: application/json');

try {
    // Check for uploaded file or file path
    if (isset($_FILES['xml_file'])) {
        $file = $_FILES['xml_file'];
        if ($file['error'] !== UPLOAD_ERR_OK) {
            throw new Exception("Upload failed with error code " . $file['error']);
        }

        // Validate file type
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mimeType = finfo_file($finfo, $file['tmp_name']);
        finfo_close($finfo);

        if (!in_array($mimeType, ['application/xml', 'text/xml'])) {
            throw new Exception("Invalid file type. Expected XML, got: " . $mimeType);
        }

        $filePath = $file['tmp_name'];
    } elseif (isset($_POST['file_path'])) {
        $filePath = $_POST['file_path'];
    } else {
        throw new Exception("Neither file upload nor file path provided");
    }

    // Detect fields using XMLConnector
    $result = XMLConnector::detectFields($filePath);
    
    echo json_encode($result);
} catch (Exception $e) {
    echo json_encode([
        'success' => false,
        'error' => $e->getMessage()
    ]);
}
<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';
require_once 'lib/CorrelationEngine.php';
include 'templates/header.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);
$correlationEngine = new CorrelationEngine($db);

$status = isset($_GET['status']) ? $_GET['status'] : 'inactive';
$searchTerm = isset($_GET['search']) ? trim($_GET['search']) : '';
$source_id = isset($_GET['source_id']) ? (int)$_GET['source_id'] : null;

$source_name = '';
if ($source_id) {
    $sourceStmt = $db->prepare("SELECT name FROM account_sources WHERE id = ?");
    $sourceStmt->execute([$source_id]);
    $source = $sourceStmt->fetch(PDO::FETCH_ASSOC);
    $source_name = $source ? $source['name'] : '';
}

if ($status === 'inactive') {
    $query = "SELECT u.*,
            GROUP_CONCAT(DISTINCT s.name) AS source_names,
            GROUP_CONCAT(DISTINCT ua.status) AS account_statuses
        FROM users u
        LEFT JOIN user_accounts ua ON u.id = ua.user_id
        LEFT JOIN account_sources s ON ua.source_id = s.id
        WHERE u.status = 'inactive'
          AND EXISTS (SELECT 1 FROM defunct_users d WHERE d.user_id = u.id AND d.status = 'pending')";
    if ($source_id) {
        $query .= " AND EXISTS (SELECT 1 FROM user_accounts ua2 WHERE ua2.user_id = u.id AND ua2.source_id = :source_id)";
    }
    if ($searchTerm) {
        $query .= " AND (
            u.email LIKE :search_email OR 
            u.employee_id LIKE :search_employee OR 
            u.first_name LIKE :search_first OR 
            u.last_name LIKE :search_last
        )";
    }
    $query .= " GROUP BY u.id ORDER BY u.updated_at DESC";

} elseif ($status === 'deleted') {
    $query = "SELECT u.*,
            GROUP_CONCAT(DISTINCT s.name) AS source_names,
            GROUP_CONCAT(DISTINCT ua.status) AS account_statuses
        FROM users u
        LEFT JOIN user_accounts ua ON u.id = ua.user_id
        LEFT JOIN account_sources s ON ua.source_id = s.id
        WHERE u.status = 'inactive'
          AND NOT EXISTS (SELECT 1 FROM defunct_users d WHERE d.user_id = u.id AND d.status = 'pending')
          AND EXISTS (SELECT 1 FROM defunct_users d WHERE d.user_id = u.id AND d.status = 'deleted')";
    if ($source_id) {
        $query .= " AND EXISTS (SELECT 1 FROM user_accounts ua2 WHERE ua2.user_id = u.id AND ua2.source_id = :source_id)";
    }
    if ($searchTerm) {
        $query .= " AND (
            u.email LIKE :search_email OR 
            u.employee_id LIKE :search_employee OR 
            u.first_name LIKE :search_first OR 
            u.last_name LIKE :search_last
        )";
    }
    $query .= " GROUP BY u.id ORDER BY u.updated_at DESC";

} else {
    // Default fallback
    $query = "SELECT u.*,
            GROUP_CONCAT(DISTINCT s.name) AS source_names,
            GROUP_CONCAT(DISTINCT ua.status) AS account_statuses
        FROM users u
        LEFT JOIN user_accounts ua ON u.id = ua.user_id
        LEFT JOIN account_sources s ON ua.source_id = s.id
        WHERE u.status = :status";
    if ($source_id) {
        $query .= " AND EXISTS (SELECT 1 FROM user_accounts ua2 WHERE ua2.user_id = u.id AND ua2.source_id = :source_id)";
    }
    if ($searchTerm) {
        $query .= " AND (
            u.email LIKE :search_email OR 
            u.employee_id LIKE :search_employee OR 
            u.first_name LIKE :search_first OR 
            u.last_name LIKE :search_last
        )";
    }
    $query .= " GROUP BY u.id ORDER BY u.updated_at DESC";
}

$stmt = $db->prepare($query);

// Bind :status always if used in query
if (strpos($query, ':status') !== false) {
    $stmt->bindValue(':status', $status);
}

// Conditionally bind :source_id if in query
if ($source_id !== null && strpos($query, ':source_id') !== false) {
    $stmt->bindValue(':source_id', $source_id);
}

// Conditionally bind search placeholders if in query
if ($searchTerm && strpos($query, ':search_email') !== false) {
    $searchPattern = "%$searchTerm%";
    $stmt->bindValue(':search_email', $searchPattern);
    $stmt->bindValue(':search_employee', $searchPattern);
    $stmt->bindValue(':search_first', $searchPattern);
    $stmt->bindValue(':search_last', $searchPattern);
}

$stmt->execute();
$users = $stmt->fetchAll(PDO::FETCH_ASSOC);
?>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>Inactive/Deleted Users</h2>
            <?php if ($source_name): ?>
                <p class="text-muted">Filtered by source: <?= htmlspecialchars($source_name) ?></p>
            <?php endif; ?>
        </div>
        <div>
            <?php if ($source_id): ?>
                <a href="sources.php?source_id=<?= $source_id ?>" class="btn btn-secondary me-2">Back to Source</a>
            <?php endif; ?>
            <a href="users.php" class="btn btn-primary">View Active Users</a>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col">
                    <ul class="nav nav-pills">
                        <li class="nav-item">
                            <a class="nav-link <?= $status === 'inactive' ? 'active' : '' ?>" href="?status=inactive">Inactive Users</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link <?= $status === 'deleted' ? 'active' : '' ?>" href="?status=deleted">Deleted Users</a>
                        </li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <form class="d-flex" method="GET">
                        <input type="hidden" name="status" value="<?= htmlspecialchars($status) ?>">
                        <input type="text" name="search" class="form-control" placeholder="Search users..." value="<?= htmlspecialchars($searchTerm) ?>">
                        <button type="submit" class="btn btn-outline-secondary ms-2">Search</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Employee ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Sources</th>
                            <th>Account Statuses</th>
                            <th>Last Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    <?php if (empty($users)): ?>
                        <tr>
                            <td colspan="7" class="text-center">No <?= htmlspecialchars($status) ?> users found.</td>
                        </tr>
                    <?php else: ?>
                        <?php foreach ($users as $user): ?>
                            <tr>
                                <td><?= htmlspecialchars($user['employee_id']) ?></td>
                                <td><?= htmlspecialchars($user['first_name'] . ' ' . $user['last_name']) ?></td>
                                <td><?= htmlspecialchars($user['email']) ?></td>
                                <td><?= htmlspecialchars($user['source_names'] ?? 'None') ?></td>
                                <td><?= htmlspecialchars($user['account_statuses'] ?? 'None') ?></td>
                                <td><?= htmlspecialchars($user['updated_at']) ?></td>
                                <td>
                                    <a href="user_detail.php?id=<?= $user['id'] ?>" class="btn btn-sm btn-info">View Details</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php endif; ?>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<?php include 'templates/footer.php'; ?>

<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';
require_once 'lib/CorrelationEngine.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);
$correlationEngine = new CorrelationEngine($db);


// Count distinct users in defunct_users with pending status
$pendingUsersStmt = $db->query("
    SELECT COUNT(DISTINCT user_id) 
    FROM defunct_users 
    WHERE status = 'pending'
");
$pendingCount = $pendingUsersStmt ? (int)$pendingUsersStmt->fetchColumn() : 0;
?>
<?php
// Get statistics
$totalActiveUsers = $db->query("SELECT COUNT(*) FROM users WHERE status = 'active'")->fetchColumn();
$totalInactiveUsers = $db->query("SELECT COUNT(*) FROM users WHERE status != 'active'")->fetchColumn();
$totalSources = $db->query("SELECT COUNT(*) FROM account_sources")->fetchColumn();
$totalRules = $db->query("SELECT COUNT(*) FROM correlation_rules")->fetchColumn();
$recentUsers = $db->query("
    SELECT u.*
    FROM users u
    LEFT JOIN defunct_users d ON d.email = u.email OR d.employee_id = u.employee_id
    WHERE u.status = 'active' AND (d.status IS NULL OR d.status != 'deleted')
    ORDER BY u.created_at DESC
    LIMIT 5
")->fetchAll(PDO::FETCH_ASSOC);


// Get last sync status and total users in SSHRData
$sshrUserCountStmt = $db->query("
    SELECT COUNT(*) as total 
    FROM user_accounts ua 
    JOIN account_sources s ON ua.source_id = s.id 
    WHERE LOWER(s.name) = 'sshrdata'
");
$totalUsers = $sshrUserCountStmt ? (int)$sshrUserCountStmt->fetchColumn() : 0;

$lastSync = $db->query("
    SELECT s.name, s.last_sync,
        (
            SELECT COUNT(*) FROM user_accounts ua WHERE ua.source_id = s.id
        ) + (
            SELECT COUNT(*) FROM uncorrelated_accounts uca WHERE uca.source_id = s.id AND uca.role_account_id IS NOT NULL
        ) AS accounts
    FROM account_sources s
    ORDER BY s.last_sync DESC
    LIMIT 3
")->fetchAll(PDO::FETCH_ASSOC);

$pageTitle = "Dashboard";
include 'templates/header.php';
?>

<div class="container mt-4">
    <h2>Identity Management Dashboard</h2>
    
    <div class="row mt-4">
        <!-- Stats Cards -->
        <div class="col">
            <div class="card text-white bg-primary h-100">
                <div class="card-body">
                    <h5 class="card-title">Users</h5>
                    <p class="card-text display-4"><?php echo $totalActiveUsers; ?></p>
                    <div class="d-flex flex-column">
                        <a href="users.php" class="text-white">View Active Users</a>
                        <?php if ($totalInactiveUsers > 0): ?>
                        <a href="inactive_users.php" class="text-white">View <?php echo $totalInactiveUsers; ?> inactive/deleted</a>
                        <?php endif; ?>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col">
            <div class="card text-white bg-success h-100">
                <div class="card-body">
                    <h5 class="card-title">Data Sources</h5>
                    <p class="card-text display-5"><?= $totalSources ?></p>
                    <a href="sources.php" class="text-white">Manage</a>
                </div>
            </div>
        </div>
        
        <div class="col">
            <div class="card text-white bg-info h-100">
                <div class="card-body">
                    <h5 class="card-title">Correlation Rules</h5>
                    <p class="card-text display-5"><?= $totalRules ?></p>
                    <a href="sources.php" class="text-white">Configure</a>
                </div>
            </div>
        </div>
        
        <div class="col">
            <div class="card text-white bg-secondary h-100">
                <div class="card-body">
                    <h5 class="card-title">Reports</h5>                    
                    <a href="reports.php" class="text-white">Generate</a>
                </div>
            </div>
        </div>


        <!-- Action Required Card -->
        <div class="col">
            <?php
            $actionCardBg = $pendingCount > 0 ? 'bg-danger text-white' : 'bg-white text-danger border-danger';
            $actionCardText = $pendingCount > 0 ? 'Users Pending Deletion' : 'No Action Required';
            ?>
            <div class="card h-100 <?= $actionCardBg ?> border border-2 border-danger">
                <div class="card-body d-flex flex-column justify-content-center align-items-center">
                    <h5 class="card-title">Action Required</h5>
                    <p class="card-text display-6 fw-bold mb-1">
                        <?= $pendingCount ?>
                    </p>
                    <span class="mb-2 small">
                        <?= $actionCardText ?>
                    </span>
                    <a href="pending_deletions.php" class="btn btn-outline-light btn-sm <?= $pendingCount > 0 ? '' : 'text-danger border-danger' ?>">Review</a>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="card text-white bg-warning h-100">
                <div class="card-body">
                    <h5 class="card-title">Sync Status</h5>
                    <p class="card-text">
                        <?php if ($lastSync && $lastSync[0]['last_sync']): ?>
                            Last: <?= date('M j, H:i', strtotime($lastSync[0]['last_sync'])) ?>
                        <?php else: ?>
                            Never synced
                        <?php endif; ?>
                    </p>
                    <a href="sync.php" class="text-white">Run Sync</a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <!-- Recent Users -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Recently Added Users</span>
                    <a href="users.php" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Added</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($recentUsers as $user): ?>
                            <tr>
                                <td>
                                    <a href="user_detail.php?id=<?= $user['id'] ?>">
				<?= htmlspecialchars(($user['first_name'] ?? '') . ' ' . ($user['last_name'] ?? '')) ?>
			    </a>
			</td>
			<td><?= htmlspecialchars($user['email'] ?? '') ?></td>
                                <td><?= date('M j', strtotime($user['created_at'])) ?></td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Last Sync Status -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Recent Sync Activity</span>
                    <a href="sync.php" class="btn btn-sm btn-outline-primary">Sync Now</a>
                </div>
                <div class="card-body">
                    <?php if ($lastSync): ?>
                        <div class="list-group">
                            <?php foreach ($lastSync as $source): ?>
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <strong><?= htmlspecialchars($source['name']) ?></strong>
                                    <span class="badge bg-primary rounded-pill">
                                        <?php if ($source['name'] === 'SSHRData'): ?>
                                                <?= $totalUsers ?> accounts
                                        <?php else: ?>
                                                <?= $source['accounts'] ?> accounts
                                        <?php endif; ?>

                                    </span>
                                </div>
                                <small class="text-muted">
                                    <?= $source['last_sync'] ? 
                                        'Last sync: ' . date('M j, H:i', strtotime($source['last_sync'])) : 
                                        'Never synced' ?>
                                </small>
                            </div>
                            <?php endforeach; ?>
                        </div>
                    <?php else: ?>
                        <div class="text-center py-3 text-muted">
                            <i class="fas fa-sync fa-2x mb-2"></i>
                            <p>No sync activity yet</p>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Quick Actions -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Quick Actions
                </div>
                <div class="card-body">
                    <div class="row g-2">
                        <div class="col-md-3">
                            <a href="sources.php" class="btn btn-outline-primary w-100">
                                <i class="fas fa-server me-2"></i>Manage Sources
                            </a>
                        </div>
                        <div class="col-md-3">
                            <a href="sources.php?source_id=1" class="btn btn-outline-success w-100">
                                <i class="fas fa-sliders-h me-2"></i>Configure Rules
                            </a>
                        </div>
                        <div class="col-md-3">
                            <a href="sync.php" class="btn btn-outline-info w-100">
                                <i class="fas fa-sync me-2"></i>Run Sync
                            </a>
                        </div>
                        <div class="col-md-3">
                            <a href="#" class="btn btn-outline-secondary w-100" data-bs-toggle="modal" data-bs-target="#addUserModal">
                                <i class="fas fa-user-plus me-2"></i>Add User
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Uncorrelated Accounts Section -->
    <div class="row mt-4">
        <div class="col-12 mb-2">
            <button class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#addRoleModal">Add Role Account</button>
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Uncorrelated Accounts
                </div>
                <div class="card-body">
                    <?php
                    // Fetch role accounts
                    $roleStmt = $db->query("SELECT id, name, description FROM role_accounts ORDER BY name");
                    $roleAccounts = $roleStmt ? $roleStmt->fetchAll(PDO::FETCH_ASSOC) : [];

                    $uncorrStmt = $db->query("
                        SELECT ua.id, ua.source_id, s.name AS source_name, ua.account_id, ua.username, ua.email, ua.created_at, ra.name AS role_name
                        FROM uncorrelated_accounts ua
                        LEFT JOIN account_sources s ON ua.source_id = s.id
                        LEFT JOIN role_accounts ra ON ua.role_account_id = ra.id
                        WHERE ua.role_account_id IS NULL
                        ORDER BY ua.created_at DESC
                        LIMIT 20
                    ");
                    if ($uncorrStmt === false) {
                        $errorInfo = $db->errorInfo();
                        echo '<div class="alert alert-danger">SQL Error: ' . htmlspecialchars($errorInfo[2] ?? '') . '</div>';
                        $uncorrAccounts = [];
                    } else {
                        $uncorrAccounts = $uncorrStmt->fetchAll(PDO::FETCH_ASSOC);
                    }
                    if ($uncorrAccounts):
                    ?>
                    <table class="table table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Source</th>
                                <th>Account ID</th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Role Account</th>
                                <th>Created</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($uncorrAccounts as $acc): ?>
                            <tr>
                                <td><?= $acc['id'] ?></td>
                                <td><?= htmlspecialchars($acc['source_name'] ?? '') ?></td>
                                <td><?= htmlspecialchars($acc['account_id'] ?? '') ?></td>
                                <td><?= htmlspecialchars($acc['username'] ?? '') ?></td>
                                <td><?= htmlspecialchars($acc['email'] ?? '') ?></td>
                                <td><?= htmlspecialchars($acc['role_name'] ?? '') ?></td>
                                <td><?= date('M j, H:i', strtotime($acc['created_at'])) ?></td>
                                <td>
                                    <a href="manual_correlate.php?id=<?= $acc['id'] ?>" class="btn btn-sm btn-primary">Correlate</a>
                                    <form method="post" action="assign_role.php" style="display:inline-block">
                                        <input type="hidden" name="account_id" value="<?= $acc['id'] ?>">
                                        <select name="role_account_id" class="form-select form-select-sm d-inline w-auto" onchange="this.form.submit()">
                                            <option value="">Assign Role</option>
                                            <?php foreach ($roleAccounts as $role): ?>
                                                <option value="<?= $role['id'] ?>" <?= ($acc['role_name'] == $role['name']) ? 'selected' : '' ?>><?= htmlspecialchars($role['name']) ?></option>
                                            <?php endforeach; ?>
                                        </select>
                                    </form>
                                </td>
                            </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php else: ?>
                        <p class="text-muted">No uncorrelated accounts found.</p>
                    <?php endif; ?>

<!-- Add Role Account Modal -->
<div class="modal fade" id="addRoleModal" tabindex="-1" aria-labelledby="addRoleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form method="post" action="create_role_account.php">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addRoleModalLabel">Add Role Account</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="role_name" class="form-label">Role Name</label>
            <input type="text" class="form-control" id="role_name" name="role_name" required>
          </div>
          <div class="mb-3">
            <label for="role_desc" class="form-label">Description</label>
            <textarea class="form-control" id="role_desc" name="role_desc" rows="2"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Create Role Account</button>
        </div>
      </div>
    </form>
  </div>
</div>
            </div>
        </div>
    </div>
</div>

<!-- Add User Modal (unchanged) -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form action="add_user.php" method="POST">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Employee ID</label>
                        <input type="text" name="employee_id" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input type="text" name="first_name" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" name="last_name" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" name="email" class="form-control" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<?php include 'templates/footer.php'; ?>
<?php
require_once 'config/database.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);

$id = isset($_GET['id']) ? intval($_GET['id']) : 0;
if ($id <= 0) {
    die("Invalid account ID.");
}

// Fetch account details
$stmt = $db->prepare("SELECT * FROM uncorrelated_accounts WHERE id = ?");
$stmt->execute([$id]);
$account = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$account) {
    die("Account not found.");
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $user_id = intval($_POST['user_id']);
    $role_account_id = isset($_POST['role_account_id']) ? intval($_POST['role_account_id']) : 0;
    if ($user_id > 0) {
        // Insert into user_accounts
        $matched_by = json_encode(['manual' => true]);
        $insert = $db->prepare("INSERT INTO user_accounts (user_id, source_id, account_id, username, email, additional_data, matched_by) VALUES (?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE user_id=VALUES(user_id), username=VALUES(username), email=VALUES(email), additional_data=VALUES(additional_data), matched_by=VALUES(matched_by), updated_at=NOW()");
        $insert->execute([
            $user_id,
            $account['source_id'],
            $account['account_id'],
            $account['username'],
            $account['email'],
            $account['account_data'],
            $matched_by
        ]);

        // Remove from uncorrelated_accounts
        $delete = $db->prepare("DELETE FROM uncorrelated_accounts WHERE id = ?");
        $delete->execute([$id]);

        echo "<div class='alert alert-success'>Account manually correlated and removed from uncorrelated list.</div>";
        echo "<a href='index.php' class='btn btn-primary'>Back to Dashboard</a>";
        exit;
    } elseif ($role_account_id > 0) {
        // Assign to role account only
        $update = $db->prepare("UPDATE uncorrelated_accounts SET role_account_id = ? WHERE id = ?");
        $update->execute([$role_account_id, $id]);
        echo "<div class='alert alert-success'>Account assigned to role account.</div>";
        echo "<a href='index.php' class='btn btn-primary'>Back to Dashboard</a>";
        exit;
    } else {
        echo "<div class='alert alert-danger'>Please select a valid user or role account.</div>";
    }
}

// List users for manual correlation
$users = $db->query("SELECT id, first_name, last_name, email FROM users ORDER BY first_name, last_name")->fetchAll(PDO::FETCH_ASSOC);
// List role accounts
$roleAccounts = $db->query("SELECT id, name FROM role_accounts ORDER BY name")->fetchAll(PDO::FETCH_ASSOC);

?>
<!DOCTYPE html>
<html>
<head>
    <title>Manual Correlation</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body class="container mt-4">
    <h2>Manual Correlation for Account ID <?= htmlspecialchars($account['account_id']) ?></h2>
    <form method="post" class="mb-3">
        <div class="mb-3">
            <label for="user_id" class="form-label">Select User:</label>
            <select name="user_id" id="user_id" class="form-select">
                <option value="">-- Select User --</option>
                <?php foreach ($users as $user): ?>
                    <option value="<?= $user['id'] ?>">
                        <?= htmlspecialchars($user['first_name'] . ' ' . $user['last_name'] . ' (' . $user['email'] . ')') ?>
                    </option>
                <?php endforeach; ?>
            </select>
        </div>
        <div class="mb-3">
            <label for="role_account_id" class="form-label">Or assign to Role Account:</label>
            <select name="role_account_id" id="role_account_id" class="form-select">
                <option value="">-- Select Role Account --</option>
                <?php foreach ($roleAccounts as $role): ?>
                    <option value="<?= $role['id'] ?>">
                        <?= htmlspecialchars($role['name']) ?>
                    </option>
                <?php endforeach; ?>
            </select>
        </div>
        <button type="submit" class="btn btn-success">Submit</button>
        <a href="index.php" class="btn btn-secondary">Cancel</a>
    </form>
</body>
</html>
<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';
require_once 'lib/CorrelationEngine.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['mark_deleted'])) {
    $userId = intval($_POST['user_id']);
    $sourceId = intval($_POST['source_id']);
    $stmt = $db->prepare("UPDATE defunct_users SET status='deleted', deleted_at=NOW() WHERE user_id=? AND source_id=?");
    $stmt->execute([$userId, $sourceId]);
    // Optionally: add a success message or reload page
}


$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);
$correlationEngine = new CorrelationEngine($db);


// Get all distinct users from defunct_users with status 'pending'
$pendingStmt = $db->query("
    SELECT DISTINCT 
        du.user_id,
	du.source_id,
        du.email,
        du.employee_id,
        GROUP_CONCAT(s.name) as source_names,
        COUNT(DISTINCT du.source_id) as pending_count,
        COUNT(DISTINCT CASE WHEN du.status = 'deleted' THEN du.source_id END) as deleted_count
    FROM defunct_users du
    JOIN account_sources s ON du.source_id = s.id
    WHERE du.status = 'pending'
    GROUP BY du.user_id, du.email, du.employee_id
    ORDER BY du.email
");
$pendingUsers = $pendingStmt ? $pendingStmt->fetchAll(PDO::FETCH_ASSOC) : [];

$pageTitle = "Pending Deletions";
include 'templates/header.php';
?>
<div class="container mt-4">
    <h2>Users Pending Deletion</h2>
    <?php if (empty($pendingUsers)): ?>
        <div class="alert alert-success">No users are currently pending deletion.</div>
    <?php else: ?>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($pendingUsers as $user): ?>
                <tr>
                    <td><?= htmlspecialchars($user['email']) ?></td>
                    <td><?= htmlspecialchars($user['employee_id']) ?></td>
                    <td>
                        <span class="badge bg-danger"><?= $user['pending_count'] ?> Pending</span>
                        <?php if ($user['deleted_count'] > 0): ?>
                            <span class="badge bg-secondary"><?= $user['deleted_count'] ?> Deleted</span>
                        <?php endif; ?>
                        <br>
                        <small class="text-muted"><?= htmlspecialchars($user['source_names']) ?></small>
                    </td>
		    <td>
			<a href="user_detail.php?user_id=<?= $user['user_id'] ?>&pending=1" class="btn btn-sm btn-info">Review</a>
		        <form method="post" style="display:inline;">
		            <input type="hidden" name="user_id" value="<?= $user['user_id'] ?>">
		            <input type="hidden" name="source_id" value="<?= $user['source_id'] ?>">
		            <button type="submit" name="mark_deleted" class="btn btn-sm btn-outline-success"
		                onclick="return confirm('Confirm backend deletion?')">Mark as Deleted</button>
		        </form>
		    </td>

                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    <?php endif; ?>
</div>
<?php include 'templates/footer.php'; ?>
<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';

// Fetch sources for dropdown early since needed for export filename
$sources = $db->query("SELECT id, name FROM account_sources ORDER BY name")->fetchAll(PDO::FETCH_ASSOC);

$selected_source = isset($_GET['source_id']) ? intval($_GET['source_id']) : 0;
$status_filter = $_GET['status_filter'] ?? '';
$sortBy = $_GET['sortBy'] ?? 'account_id';
$order = strtolower($_GET['order'] ?? 'asc');
$allowedSortColumns = ['account_id', 'username', 'email', 'first_name', 'last_name', 'status', 'created', 'created_at', 'updated', 'updated_at'];
if (!in_array($sortBy, $allowedSortColumns)) {
    $sortBy = 'account_id';
}
if ($order !== 'desc') {
    $order = 'asc';
}

// CSV Export block - must be before any output
if (isset($_GET['export']) && $selected_source) {
    // Determine the safe source name for filename
    $sourceName = "export";
    foreach ($sources as $src) {
        if ($src['id'] == $selected_source) {
	    $sourceName = preg_replace('/[^A-Za-z0-9_\-]/', '_', $src['name']);
            break;
        }
    }

    // Build base query for correlated accounts with optional status filtering
    $sql = "
        SELECT ua.account_id, ua.username, ua.email, ua.created_at, ua.updated_at,
               u.first_name, u.last_name, u.employee_id, u.status, 'correlated' AS account_type
        FROM user_accounts ua
        LEFT JOIN users u ON ua.user_id = u.id
        WHERE ua.source_id = ?
    ";
    if ($status_filter === 'active') {
        $sql .= " AND u.status = 'active' ";
    } elseif ($status_filter === 'inactive') {
        $sql .= " AND u.status != 'active' ";
    }

    // Map sort columns to database columns
    $dbSortCol = $sortBy;
    if ($dbSortCol === 'created') $dbSortCol = 'ua.created_at';
    if ($dbSortCol === 'updated') $dbSortCol = 'ua.updated_at';
    $sql .= " ORDER BY $dbSortCol $order ";

    $stmt = $db->prepare($sql);
    $stmt->execute([$selected_source]);
    $correlated = $stmt->fetchAll(PDO::FETCH_ASSOC);

    // Fetch uncorrelated accounts
    $stmt2 = $db->prepare("
        SELECT account_id, username, email, created_at, role_account_id,
               NULL AS updated_at, NULL AS first_name, NULL AS last_name,
               NULL AS employee_id, NULL AS status, 'uncorrelated' AS account_type
        FROM uncorrelated_accounts
        WHERE source_id = ?
    ");
    $stmt2->execute([$selected_source]);
    $uncorrelated = $stmt2->fetchAll(PDO::FETCH_ASSOC);

    // Map role accounts to username
    foreach ($uncorrelated as &$ua) {
        if (!empty($ua['role_account_id'])) {
            $roleStmt = $db->prepare("SELECT name FROM role_accounts WHERE id = ? LIMIT 1");
            $roleStmt->execute([$ua['role_account_id']]);
            $role = $roleStmt->fetch(PDO::FETCH_ASSOC);
            if ($role && !empty($role['name'])) {
                $ua['username'] = $role['name'];
            }
        }
    }
    unset($ua);

    // Merge accounts
    $accounts = array_merge($correlated, $uncorrelated);

    // Headers for CSV response
    header('Content-Type: text/csv; charset=utf-8');
    header('Content-Disposition: attachment; filename="' . $sourceName . '.csv"');
    header('Pragma: no-cache');
    header('Expires: 0');

    $out = fopen('php://output', 'w');

    // CSV column headers
    fputcsv($out, ['Account ID', 'Username', 'Email', 'First Name', 'Last Name', 'Employee ID', 'Status', 'Created', 'Last Updated']);

    foreach ($accounts as $user) {
        fputcsv($out, [
            strip_tags($user['account_id'] ?? ''),
            strip_tags($user['username'] ?? ''),
            strip_tags($user['email'] ?? ''),
            strip_tags($user['first_name'] ?? ''),
            strip_tags($user['last_name'] ?? ''),
            strip_tags($user['employee_id'] ?? ''),
            strip_tags($user['status'] ?? ''),
            strip_tags($user['created_at'] ?? ''),
            strip_tags($user['updated_at'] ?? ''),
        ]);
    }
    fclose($out);
    exit;
}

// Normal page rendering below

include 'templates/header.php';

$users = [];
if ($selected_source) {
    // Base query for correlated accounts with optional status filter and sorting
    $sql = "
        SELECT ua.account_id, ua.username, ua.email, ua.created_at, ua.updated_at,
               u.first_name, u.last_name, u.employee_id, u.status, 'correlated' AS account_type
        FROM user_accounts ua
        LEFT JOIN users u ON ua.user_id = u.id
        WHERE ua.source_id = ?
    ";
    if ($status_filter === 'active') {
        $sql .= " AND u.status = 'active' ";
    } elseif ($status_filter === 'inactive') {
        $sql .= " AND u.status != 'active' ";
    }
    // Map sort columns
    $dbSortCol = $sortBy;
    if ($dbSortCol === 'created') $dbSortCol = 'ua.created_at';
    if ($dbSortCol === 'updated') $dbSortCol = 'ua.updated_at';
    $sql .= " ORDER BY $dbSortCol $order ";
    $stmt = $db->prepare($sql);
    $stmt->execute([$selected_source]);
    $correlated = $stmt->fetchAll(PDO::FETCH_ASSOC);
    // Uncorrelated accounts
    $stmt2 = $db->prepare("
        SELECT account_id, username, email, created_at, role_account_id,
               NULL AS updated_at, NULL AS first_name, NULL AS last_name,
               NULL AS employee_id, NULL AS status, 'uncorrelated' AS account_type
        FROM uncorrelated_accounts
        WHERE source_id = ?
    ");
    $stmt2->execute([$selected_source]);
    $uncorrelated = $stmt2->fetchAll(PDO::FETCH_ASSOC);
    // Map role accounts to username
    foreach ($uncorrelated as &$ua) {
        if (!empty($ua['role_account_id'])) {
            $roleStmt = $db->prepare("SELECT name FROM role_accounts WHERE id = ? LIMIT 1");
            $roleStmt->execute([$ua['role_account_id']]);
            $role = $roleStmt->fetch(PDO::FETCH_ASSOC);
            if ($role && !empty($role['name'])) {
                $ua['username'] = $role['name'];
            }
        }
    }
    unset($ua);
    $accounts = array_merge($correlated, $uncorrelated);
    // Determine columns present
    $allColumns = [];
    foreach ($accounts as $row) {
        foreach ($row as $key => $val) {
            $allColumns[$key] = true;
        }
    }
    // Column headers for display
    $columnHeaders = [
        'account_id' => 'Account ID',
        'username' => 'Username',
        'email' => 'Email',
        'first_name' => 'First Name',
        'last_name' => 'Last Name',
        'status' => 'Status',
        'created' => 'Created',
        'updated' => 'Last Updated',
    ];
    if (isset($allColumns['created_at'])) {
        $allColumns['created'] = true;
    }
    if (isset($allColumns['updated_at'])) {
        $allColumns['updated'] = true;
    }
    $displayColumns = array_intersect_key($columnHeaders, $allColumns);
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Source Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        th a {
            color: inherit;
            text-decoration: none;
        }
        th a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
<div class="container py-4">
    <h2>Source Report</h2>
    <form method="get" class="mb-4">
        <label for="source_id" class="form-label">Select Source:</label>
        <select name="source_id" id="source_id" class="form-select" style="width:auto;display:inline-block" required>
            <option value="">-- Choose --</option>
            <?php foreach ($sources as $src): ?>
                <option value="<?= $src['id'] ?>" <?= $selected_source == $src['id'] ? 'selected' : '' ?>>
                    <?= htmlspecialchars($src['name']) ?>
                </option>
            <?php endforeach; ?>
        </select>
        <label for="status_filter" class="form-label ms-3">Account Status:</label>
        <select name="status_filter" id="status_filter" class="form-select" style="width:auto;display:inline-block">
            <option value="" <?= $status_filter === '' ? 'selected' : '' ?>>All</option>
            <option value="active" <?= $status_filter === 'active' ? 'selected' : '' ?>>Active</option>
            <option value="inactive" <?= $status_filter === 'inactive' ? 'selected' : '' ?>>Inactive</option>
        </select>
        <button type="submit" class="btn btn-primary ms-2">Generate</button>
        <?php if ($selected_source): ?>
        <a href="reports.php?source_id=<?= $selected_source ?>&status_filter=<?= htmlspecialchars($status_filter) ?>&export=1" class="btn btn-success ms-2">Export CSV</a>
        <?php endif; ?>
    </form>
    <?php if ($selected_source): ?>
        <p><?= count($accounts ?? []) ?> account(s) found for this source.</p>
        <?php if (!empty($accounts)): ?>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <?php foreach ($displayColumns as $col => $header):
                        $nextOrder = ($sortBy === $col && $order === 'asc') ? 'desc' : 'asc';
                        $arrow = '';
                        if ($sortBy === $col) {
                            $arrow = $order === 'asc' ? '▲' : '▼';
                        }
                    ?>
                    <th>
                        <a href="?source_id=<?= $selected_source ?>&status_filter=<?= htmlspecialchars($status_filter) ?>&sortBy=<?= $col ?>&order=<?= $nextOrder ?>">
                            <?= htmlspecialchars($header) ?> <?= $arrow ?>
                        </a>
                    </th>
                    <?php endforeach; ?>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($accounts as $a): ?>
                <tr>
                    <?php foreach ($displayColumns as $col => $header): ?>
                    <td><?= htmlspecialchars($a[$col] ?? ($a[$col.'_at'] ?? '')) ?></td>
                    <?php endforeach; ?>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
        <?php else: ?>
        <div class="alert alert-warning">No accounts found.</div>
        <?php endif; ?>
    <?php else: ?>
        <div class="alert alert-info">Please select a source.</div>
    <?php endif; ?>
</div>
</body>
</html>

sources.php
<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';
require_once 'lib/CorrelationEngine.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);
$correlationEngine = new CorrelationEngine($db);

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        // Add Source
        if (isset($_POST['add_source'])) {
            $type = $_POST['type'];
            $name = $_POST['name'];
            $category = $_POST['category'];
            $is_baseline = isset($_POST['is_baseline']) ? $_POST['is_baseline'] : 0;
            $description = isset($_POST['description']) ? $_POST['description'] : '';
            // Build config array based on type
            $config = [];
            switch ($type) {
                case 'CSV':
                    $config = [
                        'file_path' => $_POST['file_path'] ?? '',
                        'has_headers' => isset($_POST['has_headers']),
                        'field_mapping' => [
                            'email' => $_POST['email_field'] ?? 'email',
                            'username' => $_POST['username_field'] ?? 'username',
                            'employee_id' => $_POST['employee_id_field'] ?? 'employee_id',
                            'supervisor_email' => $_POST['supervisor_email_field'] ?? 'supervisor_email'

                        ]
                    ];
                    break;
                case 'LDAP':
                    $config = [
                        'host' => $_POST['ldap_host'] ?? '',
                        'port' => $_POST['ldap_port'] ?? '',
                        'base_dn' => $_POST['base_dn'] ?? '',
                        'bind_dn' => $_POST['bind_dn'] ?? '',
                        'bind_password' => $_POST['bind_password'] ?? ''
                    ];
                    break;
            }
            $configJson = json_encode($config);
            // Insert new source into account_sources with config JSON
            $insertStmt = $db->prepare("INSERT INTO account_sources (name, type, category, is_baseline, description, config) VALUES (?, ?, ?, ?, ?, ?)");
            $inserted = $insertStmt->execute([$name, $type, $category, $is_baseline, $description, $configJson]);
            if ($inserted) {
                $_SESSION['message'] = "Source added successfully!";
                $_SESSION['message_type'] = "success";
            } else {
                $_SESSION['message'] = "Failed to add source.";
                $_SESSION['message_type'] = "danger";
            }
            header("Location: sources.php");
            exit;
        }
        // Update Source
        elseif (isset($_POST['update_source'])) {
            $sourceId = $_POST['source_id'];
            $type = $_POST['type'];
            $name = $_POST['name'];
            $category = $_POST['category'];
            $is_baseline = isset($_POST['is_baseline']) ? $_POST['is_baseline'] : 0;
            $description = isset($_POST['description']) ? $_POST['description'] : '';
            // Build config array based on type
            $config = [];
            switch ($type) {
                case 'CSV':
                    $config = [
                        'file_path' => $_POST['file_path'] ?? '',
                        'has_headers' => isset($_POST['has_headers']),
                        'field_mapping' => [
                            'email' => $_POST['email_field'] ?? 'email',
                            'username' => $_POST['username_field'] ?? 'username',
                            'employee_id' => $_POST['employee_id_field'] ?? 'employee_id'
                        ]
                    ];
                    break;
                case 'LDAP':
                    $config = [
                        'host' => $_POST['ldap_host'] ?? '',
                        'port' => $_POST['ldap_port'] ?? '',
                        'base_dn' => $_POST['base_dn'] ?? '',
                        'bind_dn' => $_POST['bind_dn'] ?? '',
                        'bind_password' => $_POST['bind_password'] ?? ''
                    ];
                    break;
            }
            $configJson = json_encode($config);
            $updateStmt = $db->prepare("UPDATE account_sources SET name=?, type=?, category=?, is_baseline=?, description=?, config=? WHERE id=?");
            $updated = $updateStmt->execute([$name, $type, $category, $is_baseline, $description, $configJson, $sourceId]);
            if ($updated) {
                $_SESSION['message'] = "Source updated successfully!";
                $_SESSION['message_type'] = "success";
            } else {
                $_SESSION['message'] = "Failed to update source.";
                $_SESSION['message_type'] = "danger";
            }
            header("Location: sources.php?source_id=$sourceId");
            exit;
        }
        // Delete Source
        elseif (isset($_POST['delete_source'])) {
            $sourceId = $_POST['source_id'];
            $deleteStmt = $db->prepare("DELETE FROM account_sources WHERE id=?");
            $deleted = $deleteStmt->execute([$sourceId]);
            if ($deleted) {
                $_SESSION['message'] = "Source deleted successfully!";
                $_SESSION['message_type'] = "info";
                header("Location: sources.php");
            } else {
                $_SESSION['message'] = "Failed to delete source.";
                $_SESSION['message_type'] = "danger";
                header("Location: sources.php?source_id=$sourceId");
            }
            exit;
        }
        elseif (isset($_POST['add_rule'])) {
            $sourceId = $_POST['source_id'];
            $matchField = $_POST['match_field'];
            $matchType = $_POST['match_type'];
            $priority = $_POST['priority'];

            if ($correlationEngine->addRule($sourceId, $matchField, $matchType, $priority)) {
                $_SESSION['message'] = "Correlation rule added successfully!";
                $_SESSION['message_type'] = "success";
            } else {
                throw new Exception("Failed to add correlation rule");
            }

            header("Location: sources.php?source_id=$sourceId");
            exit;
        }
        elseif (isset($_POST['delete_rule'])) {
            $ruleId = $_POST['rule_id'];
            $sourceId = $_POST['source_id'];

            if ($correlationEngine->deleteRule($ruleId)) {
                $_SESSION['message'] = "Rule deleted successfully!";
                $_SESSION['message_type'] = "info";
            } else {
                throw new Exception("Failed to delete rule");
            }

            header("Location: sources.php?source_id=$sourceId");
            exit;
        }
    } catch (Exception $e) {
        $_SESSION['message'] = "Error: " . $e->getMessage();
        $_SESSION['message_type'] = "danger";
        header("Location: sources.php" . (isset($sourceId) ? "?source_id=$sourceId" : ""));
        exit;
    }
}

// Get current source ID
$currentSourceId = $_GET['source_id'] ?? null;

// Get all sources with stats
$sources = $db->query("
    SELECT s.*,
        (
            SELECT COUNT(*) FROM user_accounts ua WHERE ua.source_id = s.id
        ) + (
            SELECT COUNT(*) FROM uncorrelated_accounts uca WHERE uca.source_id = s.id AND uca.role_account_id IS NOT NULL
        ) AS account_count,
        MAX(a.updated_at) as last_account_update,
        COUNT(r.id) as rule_count
    FROM account_sources s
    LEFT JOIN user_accounts a ON a.source_id = s.id
    LEFT JOIN correlation_rules r ON r.source_id = s.id
    GROUP BY s.id
    ORDER BY s.name
")->fetchAll(PDO::FETCH_ASSOC);



// Get rules for current source
$rules = [];
if ($currentSourceId) {
    $rules = $correlationEngine->getRulesForSource($currentSourceId);
}

// Set current source for template and initialize related variables
$currentSource = null;
$accounts = [];
$inactiveCount = 0;

if ($currentSourceId) {
    foreach ($sources as $src) {
        if ($src['id'] == $currentSourceId) {
            $currentSource = $src;

            // Get active accounts
            $accountsStmt = $db->prepare("
                SELECT ua.account_id, ua.email, ua.username, ua.created_at, ua.updated_at, ua.status
                FROM user_accounts ua
                JOIN users u ON ua.user_id = u.id
                WHERE ua.source_id = ? AND u.status = 'active'
            ");
            $accountsStmt->execute([$currentSourceId]);
            $accounts = $accountsStmt->fetchAll(PDO::FETCH_ASSOC);

            // Get count of inactive/deleted accounts
            $inactiveStmt = $db->prepare("
                SELECT COUNT(*) as count
                FROM user_accounts ua
                JOIN users u ON ua.user_id = u.id
                WHERE ua.source_id = ? AND u.status != 'active'
            ");
            $inactiveStmt->execute([$currentSourceId]);
            $inactiveCount = (int)$inactiveStmt->fetch(PDO::FETCH_ASSOC)['count'];
            break;
        }
    }
}

include 'templates/header.php';
?>


<div class="container mt-4">
    <h2>Data Source Management</h2>

    <?php if (isset($_SESSION['message'])): ?>
        <div class="alert alert-<?= $_SESSION['message_type'] ?> alert-dismissible fade show">
            <?= $_SESSION['message'] ?>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        <?php unset($_SESSION['message']); ?>
    <?php endif; ?>

    <div class="row">
        <!-- Sidebar: Source List -->
        <div class="col-md-3">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Sources</span>
                    <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addSourceModal">
                        <i class="fas fa-plus"></i> Add
                    </button>
                </div>
                <ul class="list-group list-group-flush">
                    <?php if (!empty($sources)): ?>
                        <?php foreach ($sources as $src): ?>
                            <a href="sources.php?source_id=<?= urlencode($src['id']) ?>" class="list-group-item list-group-item-action<?= ($currentSourceId == $src['id']) ? ' active' : '' ?>">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span><?= htmlspecialchars($src['name']) ?></span>
                                    <span class="badge bg-secondary ms-2">Accounts: <?= $src['account_count'] ?></span>
                                </div>
                                <div class="small text-muted">Type: <?= htmlspecialchars($src['type']) ?> | Rules: <?= $src['rule_count'] ?></div>
                            </a>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <li class="list-group-item text-muted">No sources found.</li>
                    <?php endif; ?>
                </ul>
            </div>
        </div>

        <!-- Main Content: Source Details or Prompt -->
        <div class="col-md-9">
            <?php if ($currentSource): ?>
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><?= htmlspecialchars($currentSource['name']) ?> (<?= htmlspecialchars($currentSource['type']) ?>)</span>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary me-2" data-bs-toggle="modal" data-bs-target="#editSourceModal">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteSourceModal">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
<!-- Edit Source Modal -->
<?php if ($currentSource): ?>
<div class="modal fade" id="editSourceModal" tabindex="-1" aria-labelledby="editSourceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSourceModalLabel">Edit Data Source</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="POST">
                <input type="hidden" name="source_id" value="<?= htmlspecialchars($currentSource['id']) ?>">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Source Name</label>
                        <input type="text" name="name" class="form-control" value="<?= htmlspecialchars($currentSource['name']) ?>" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Source Type</label>
                        <select name="type" class="form-control" id="editSourceType" required>
                            <option value="CSV" <?= $currentSource['type'] === 'CSV' ? 'selected' : '' ?>>CSV File</option>
                            <option value="LDAP" <?= $currentSource['type'] === 'LDAP' ? 'selected' : '' ?>>LDAP Directory</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editCategory">Category</label>
                        <select name="category" id="editCategory" class="form-select" required>
                            <option value="Application" <?= ($currentSource['category'] ?? '') === 'Application' ? 'selected' : '' ?>>Application</option>
                            <option value="OS" <?= ($currentSource['category'] ?? '') === 'OS' ? 'selected' : '' ?>>OS</option>
                            <option value="Database" <?= ($currentSource['category'] ?? '') === 'Database' ? 'selected' : '' ?>>Database</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-check-label" for="edit_is_baseline">
                            This is the baseline HR source (do not apply correlation rules)
                        </label>
                        <input type="checkbox" name="is_baseline" id="edit_is_baseline" value="1" <?= !empty($currentSource['is_baseline']) ? 'checked' : '' ?>>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="2"><?= htmlspecialchars($currentSource['description'] ?? '') ?></textarea>
                    </div>
                    <?php
                    $editConfig = json_decode($currentSource['config'] ?? '{}', true);
                    ?>
                    <!-- CSV Configuration -->
                    <div id="editCsvConfig" class="source-config" style="display:<?= $currentSource['type'] === 'CSV' ? 'block' : 'none' ?>;">
                        <h6 class="mt-3">CSV Configuration</h6>
                        <div class="mb-3">
                            <label class="form-label">File Path</label>
                            <div class="input-group">
                                <input type="text" name="file_path" id="editCsvFilePath" class="form-control" value="<?= htmlspecialchars($editConfig['file_path'] ?? '') ?>">
                                <button type="button" id="editDetectHeadersBtn" class="btn btn-outline-secondary">
                                    <i class="fas fa-search"></i> Detect Headers
                                </button>
                            </div>
                        </div>
                        <div class="form-check mb-3">
                            <input type="checkbox" name="has_headers" class="form-check-input" id="editCsvHeaders" <?= !empty($editConfig['has_headers']) ? 'checked' : '' ?> >
                            <label class="form-check-label" for="editCsvHeaders">First row contains headers</label>
                        </div>
                        <h6 class="mt-3">Field Mappings</h6>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Email Field</label>
                                <select name="email_field" class="form-select edit-field-mapping-select">
                                    <option value="<?= htmlspecialchars($editConfig['field_mapping']['email'] ?? 'email') ?>" selected><?= htmlspecialchars($editConfig['field_mapping']['email'] ?? 'email') ?></option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Username Field</label>
                                <select name="username_field" class="form-select edit-field-mapping-select">
                                    <option value="<?= htmlspecialchars($editConfig['field_mapping']['username'] ?? 'username') ?>" selected><?= htmlspecialchars($editConfig['field_mapping']['username'] ?? 'username') ?></option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Employee ID Field</label>
                                <select name="employee_id_field" class="form-select edit-field-mapping-select">
                                    <option value="<?= htmlspecialchars($editConfig['field_mapping']['employee_id'] ?? 'employee_id') ?>" selected><?= htmlspecialchars($editConfig['field_mapping']['employee_id'] ?? 'employee_id') ?></option>
                                </select>
                            </div>
                        </div>
                        <div id="editHeaderDetectionStatus" class="mt-2 text-muted small"></div>
                    </div>
                    <!-- LDAP Configuration -->
                    <div id="editLdapConfig" class="source-config" style="display:<?= $currentSource['type'] === 'LDAP' ? 'block' : 'none' ?>;">
                        <h6 class="mt-3">LDAP Configuration</h6>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Host</label>
                                <input type="text" name="ldap_host" class="form-control" value="<?= htmlspecialchars($editConfig['host'] ?? '') ?>">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Port</label>
                                <input type="number" name="ldap_port" class="form-control" value="<?= htmlspecialchars($editConfig['port'] ?? '389') ?>">
                            </div>
                            <div class="col-12">
                                <label class="form-label">Base DN</label>
                                <input type="text" name="base_dn" class="form-control" value="<?= htmlspecialchars($editConfig['base_dn'] ?? '') ?>">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Bind DN</label>
                                <input type="text" name="bind_dn" class="form-control" value="<?= htmlspecialchars($editConfig['bind_dn'] ?? '') ?>">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Bind Password</label>
                                <input type="password" name="bind_password" class="form-control" value="<?= htmlspecialchars($editConfig['bind_password'] ?? '') ?>">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" name="update_source" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<?php endif; ?>

<!-- Delete Source Modal -->
<?php if ($currentSource): ?>
<div class="modal fade" id="deleteSourceModal" tabindex="-1" aria-labelledby="deleteSourceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteSourceModalLabel">Delete Data Source</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="POST">
                <input type="hidden" name="source_id" value="<?= htmlspecialchars($currentSource['id']) ?>">
                <div class="modal-body">
                    <p>Are you sure you want to delete the source <strong><?= htmlspecialchars($currentSource['name']) ?></strong>? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" name="delete_source" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>
<?php endif; ?>
</script>
<script>
// Show/hide configuration in Edit Source Modal based on type and handle Detect Headers
document.addEventListener('DOMContentLoaded', function() {
    var editTypeSelect = document.getElementById('editSourceType');
    if (editTypeSelect) {
        editTypeSelect.addEventListener('change', function() {
            document.getElementById('editCsvConfig').style.display = this.value === 'CSV' ? 'block' : 'none';
            document.getElementById('editLdapConfig').style.display = this.value === 'LDAP' ? 'block' : 'none';
        });
    }
    // CSV header detection for Edit Source Modal
    var editDetectHeadersBtn = document.getElementById('editDetectHeadersBtn');
    if (editDetectHeadersBtn) {
        editDetectHeadersBtn.addEventListener('click', async function() {
            const filePath = document.getElementById('editCsvFilePath').value;
            const statusElement = document.getElementById('editHeaderDetectionStatus');
            const hasHeaders = document.getElementById('editCsvHeaders').checked;
            if (!filePath) {
                statusElement.textContent = 'Please enter a file path first';
                statusElement.className = 'mt-2 text-danger small';
                return;
            }
            statusElement.textContent = 'Detecting headers...';
            statusElement.className = 'mt-2 text-info small';
            try {
                const formData = new FormData();
                formData.append('file_path', filePath);
                formData.append('has_headers', hasHeaders ? '1' : '0');
                const response = await fetch('get_csv_headers.php', {
                    method: 'POST',
                    body: formData
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.error || 'Unknown error occurred');
                }
                // Update all field mapping dropdowns in edit modal
                document.querySelectorAll('.edit-field-mapping-select').forEach(select => {
                    const currentValue = select.value;
                    select.innerHTML = '';
                    data.headers.forEach(header => {
                        const option = document.createElement('option');
                        option.value = header;
                        option.textContent = header;
                        option.selected = (header === currentValue);
                        select.appendChild(option);
                    });
                    // Keep current value if not in detected headers
                    if (currentValue && !data.headers.includes(currentValue)) {
                        const option = document.createElement('option');
                        option.value = currentValue;
                        option.textContent = currentValue;
                        option.selected = true;
                        select.insertBefore(option, select.firstChild);
                    }
                });
                statusElement.textContent = `Detected ${data.headers.length} headers`;
                statusElement.className = 'mt-2 text-success small';
            } catch (error) {
                statusElement.textContent = `Error: ${error.message}`;
                statusElement.className = 'mt-2 text-danger small';
                console.error('Header detection error:', error);
            }
        });
    }
});
</script>
                    <div class="card-body">
                        <!-- Correlation Rules Section -->
                        <h5 class="mt-4">Correlation Rules</h5>
                        <div class="mb-3">
                            <form method="POST" class="row g-2 align-items-end">
                                <input type="hidden" name="source_id" value="<?= htmlspecialchars($currentSource['id']) ?>">
                                <div class="col-md-3">
                                    <label class="form-label">Match Field</label>
                                    <input type="text" name="match_field" class="form-control" required>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Match Type</label>
                                    <select name="match_type" class="form-select" required>
                                        <option value="exact">Exact</option>
                                        <option value="contains">Contains</option>
                                        <option value="startswith">Starts With</option>
                                        <option value="endswith">Ends With</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Priority</label>
                                    <input type="number" name="priority" class="form-control" value="1" min="1" required>
                                </div>
                                <div class="col-md-2">
                                    <button type="submit" name="add_rule" class="btn btn-primary">Add Rule</button>
                                </div>
                            </form>
                        </div>
                        <?php if (!empty($rules)): ?>
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover table-sm mt-2" style="font-size: 0.95rem;">
                                <thead>
                                    <tr>
                                        <th>Field</th>
                                        <th>Type</th>
                                        <th>Priority</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php foreach ($rules as $rule): ?>
                                    <tr>
                                        <td><?= htmlspecialchars($rule['match_field']) ?></td>
                                        <td><?= htmlspecialchars($rule['match_type']) ?></td>
                                        <td><?= htmlspecialchars($rule['priority']) ?></td>
                                        <td>
                                            <form method="POST" style="display:inline;">
                                                <input type="hidden" name="rule_id" value="<?= htmlspecialchars($rule['id']) ?>">
                                                <input type="hidden" name="source_id" value="<?= htmlspecialchars($currentSource['id']) ?>">
                                                <button type="submit" name="delete_rule" class="btn btn-sm btn-danger" onclick="return confirm('Delete this rule?')"><i class="fas fa-trash"></i></button>
                                            </form>
                                        </td>
                                    </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        </div>
                        <?php else: ?>
                            <div class="alert alert-info">No correlation rules defined for this source.</div>
                        <?php endif; ?>
                        <p><strong>Category:</strong> <?= htmlspecialchars($currentSource['category']) ?></p>
                        <p><strong>Description:</strong> <?= nl2br(htmlspecialchars($currentSource['description'] ?? '')) ?></p>
                        <p>
                            <strong>Active Accounts:</strong> <?= count($accounts) ?>
                            <?php if ($inactiveCount > 0): ?>
                            <a href="inactive_users.php?source_id=<?= $currentSource['id'] ?>" class="btn btn-sm btn-secondary ms-2">
                                View <?= $inactiveCount ?> Inactive/Deleted Accounts
                            </a>
                            <?php endif; ?>
                        </p>
                        <p><strong>Last Account Update:</strong> <?= $currentSource['last_account_update'] ?></p>
                        <p><strong>Correlation Rules:</strong> <?= $currentSource['rule_count'] ?></p>

                        <?php
                        // Define columns to display and their user-friendly headers

                        $displayColumns = [
                            'account_id' => 'Account ID',
                            'email' => 'Email Address',
                            'username' => 'Username',
                            'created_at' => 'Created',
                            'updated_at' => 'Last Updated',
                        ];

                        // Display accounts in table format
                        if (!empty($allAccounts)) {
                            echo '<h5 class="mt-4">Accounts</h5>';
                            echo '<div class="table-responsive"><table class="table table-bordered table-hover table-sm" style="font-size: 0.92rem;">';
                            echo '<thead><tr>';
                            foreach ($displayColumns as $col => $header) {
                                echo '<th>' . htmlspecialchars($header) . '</th>';
                            }
                            echo '</tr></thead><tbody>';
                        }  // end if (!empty($allAccounts))

                        // Fetch correlated accounts (role accounts)

                        // Fetch correlated accounts by joining uncorrelated_accounts with user_accounts (role accounts)

                        // Note: uncorrelated_accounts may not have updated_at column
                        $correlatedStmt = $db->prepare("
                            SELECT account_id, email, username, created_at, role_account_id
                            FROM uncorrelated_accounts
                            WHERE source_id = ? AND role_account_id IS NOT NULL
                        ");
                        $correlatedStmt->execute([$currentSource['id']]);
                        $correlatedAccounts = $correlatedStmt->fetchAll(PDO::FETCH_ASSOC);


                        // For correlated accounts, use role_account's username as username
                        foreach ($correlatedAccounts as &$ca) {
                            if (!isset($ca['updated_at'])) {
                                $ca['updated_at'] = '';
                            }
                            // If role_account_id is set, fetch name from role_accounts and use as username
                            if (!empty($ca['role_account_id'])) {
                                $roleStmt = $db->prepare("SELECT name FROM role_accounts WHERE id = ? LIMIT 1");
                                $roleStmt->execute([$ca['role_account_id']]);
                                $role = $roleStmt->fetch(PDO::FETCH_ASSOC);
                                if ($role && !empty($role['name'])) {
                                    $ca['username'] = $role['name'];
                                }
                            }
                        }
                        unset($ca);


                        // If SSHRData source exists, build a lookup of email => username from it
                        $sshrUsernames = [];
                        foreach ($sources as $src) {
                            if (strtolower($src['name']) === 'sshrdata') {
                                $sshrStmt = $db->prepare("SELECT email, username FROM user_accounts WHERE source_id = ?");
                                $sshrStmt->execute([$src['id']]);
                                foreach ($sshrStmt->fetchAll(PDO::FETCH_ASSOC) as $sshrRow) {
                                    if (!empty($sshrRow['email']) && !empty($sshrRow['username'])) {
                                        $sshrUsernames[strtolower($sshrRow['email'])] = $sshrRow['username'];
                                    }
                                }
                                break;
                            }
                        }

                        // For all accounts, if username is missing, fill from SSHRData by email
                        $allAccounts = array_merge($accounts, $correlatedAccounts);
                        if (!empty($sshrUsernames)) {
                            foreach ($allAccounts as &$acc) {
                                if (empty($acc['username']) && !empty($acc['email'])) {
                                    $emailKey = strtolower($acc['email']);
                                    if (isset($sshrUsernames[$emailKey])) {
                                        $acc['username'] = $sshrUsernames[$emailKey];
                                    }
                                }
                            }
                            unset($acc);
                        }

                        if (!empty($allAccounts)) {
                            echo '<h5 class="mt-4">Accounts</h5>';
                            echo '<div class="table-responsive"><table class="table table-bordered table-hover table-sm" style="font-size: 0.92rem;">';
                            echo '<thead><tr>';
                            foreach ($displayColumns as $col => $header) {
                                echo '<th>' . htmlspecialchars($header) . '</th>';
                            }
                            echo '</tr></thead><tbody>';
                            foreach ($allAccounts as $row) {
                                echo '<tr>';
                                foreach ($displayColumns as $col => $header) {
                                    echo '<td>' . htmlspecialchars($row[$col] ?? '') . '</td>';
                                }
                                echo '</tr>';
                            }
                            echo '</tbody></table></div>';
                        } else {
                            echo '<div class="alert alert-info mt-4">No accounts found for this source.</div>';
                        }
                        ?>
                    </div>
                </div>
            <?php else: ?>
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-server fa-4x text-muted mb-3"></i>
                        <h5>Select a data source</h5>
                        <p class="text-muted">Choose a source from the list to view or manage correlation rules</p>
                    </div>
                </div>
            <?php endif; ?>
        </div>
    </div>
</div>

<!-- Add Source Modal -->
<div class="modal fade" id="addSourceModal" tabindex="-1" aria-labelledby="addSourceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSourceModalLabel">Add New Data Source</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="POST">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Source Name</label>
                        <input type="text" name="name" class="form-control" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Source Type</label>
                        <select name="type" class="form-control" id="sourceType" required>
                            <option value="">-- Select Type --</option>
                            <option value="CSV">CSV File</option>
                            <option value="LDAP">LDAP Directory</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="category">Category</label>
                        <select name="category" id="category" class="form-select" required>
                            <option value="Application" <?= ($category ?? '') === 'Application' ? 'selected' : '' ?>>Application</option>
                            <option value="OS" <?= ($category ?? '') === 'OS' ? 'selected' : '' ?>>OS</option>
                            <option value="Database" <?= ($category ?? '') === 'Database' ? 'selected' : '' ?>>Database</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-check-label" for="is_baseline">
                            This is the baseline HR source (do not apply correlation rules)
                        </label>
                        <input type="checkbox" name="is_baseline" id="is_baseline" value="1">
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="2"></textarea>
                    </div>

                    <!-- CSV Configuration -->
                    <div id="csvConfig" class="source-config" style="display:none;">
                        <h6 class="mt-3">CSV Configuration</h6>
                        <div class="mb-3">
                            <label class="form-label">File Path</label>
                            <div class="input-group">
                                <input type="text" name="file_path" id="csvFilePath" class="form-control" placeholder="C:\\path\\to\\file.csv" required>
                                <button type="button" id="detectHeadersBtn" class="btn btn-outline-secondary">
                                    <i class="fas fa-search"></i> Detect Headers
                                </button>
                            </div>
                        </div>
                        <div class="form-check mb-3">
                            <input type="checkbox" name="has_headers" class="form-check-input" checked id="csvHeaders">
                            <label class="form-check-label" for="csvHeaders">First row contains headers</label>
                        </div>

                        <h6 class="mt-3">Field Mappings</h6>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Email Field</label>
                                <select name="email_field" class="form-select field-mapping-select">
                                    <option value="email">email</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Username Field</label>
                                <select name="username_field" class="form-select field-mapping-select">
                                    <option value="username">username</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Employee ID Field</label>
                                <select name="employee_id_field" class="form-select field-mapping-select">
                                    <option value="employee_id">employee_id</option>
                                </select>
                            </div>
                        </div>
                        <div id="headerDetectionStatus" class="mt-2 text-muted small"></div>
                    </div>
                    <!-- LDAP Configuration -->
                    <div id="ldapConfig" class="source-config" style="display:none;">
                        <h6 class="mt-3">LDAP Configuration</h6>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Host</label>
                                <input type="text" name="ldap_host" class="form-control" placeholder="ldap.example.com">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Port</label>
                                <input type="number" name="ldap_port" class="form-control" value="389">
                            </div>
                            <div class="col-12">
                                <label class="form-label">Base DN</label>
                                <input type="text" name="base_dn" class="form-control" placeholder="ou=users,dc=example,dc=com">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Bind DN</label>
                                <input type="text" name="bind_dn" class="form-control" placeholder="cn=admin,dc=example,dc=com">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Bind Password</label>
                                <input type="password" name="bind_password" class="form-control">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" name="add_source" class="btn btn-primary">Add Source</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Show/hide configuration based on source type
document.getElementById('sourceType').addEventListener('change', function() {
    document.querySelectorAll('.source-config').forEach(el => {
        el.style.display = 'none';
    });

    const configEl = document.getElementById(this.value.toLowerCase() + 'Config');
    if (configEl) {
        configEl.style.display = 'block';
    }
});

// Initialize tabs
var tabElms = document.querySelectorAll('#sourceTabs button[data-bs-toggle="tab"]');
tabElms.forEach(function(tabEl) {
    tabEl.addEventListener('click', function (event) {
        event.preventDefault();
        new bootstrap.Tab(this).show();
    });
});

// CSV header detection from file path
document.getElementById('detectHeadersBtn').addEventListener('click', async function() {
    const filePath = document.getElementById('csvFilePath').value;
    const statusElement = document.getElementById('headerDetectionStatus');

    if (!filePath) {
        statusElement.textContent = 'Please enter a file path first';
        statusElement.className = 'mt-2 text-danger small';
        return;
    }

    statusElement.textContent = 'Detecting headers...';
    statusElement.className = 'mt-2 text-info small';

    try {
        const formData = new FormData();
        formData.append('file_path', filePath);
        formData.append('has_headers', document.getElementById('csvHeaders').checked ? '1' : '0');

        const response = await fetch('get_csv_headers.php', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.error || 'Unknown error occurred');
        }

        // Update all field mapping dropdowns
        document.querySelectorAll('.field-mapping-select').forEach(select => {
            const currentValue = select.value;
            select.innerHTML = '';

            // Add detected headers
            data.headers.forEach(header => {
                const option = document.createElement('option');
                option.value = header;
                option.textContent = header;
                option.selected = (header === currentValue);
                select.appendChild(option);
            });

            // Keep current value if not in detected headers
            if (currentValue && !data.headers.includes(currentValue)) {
                const option = document.createElement('option');
                option.value = currentValue;
                option.textContent = currentValue;
                option.selected = true;
                select.insertBefore(option, select.firstChild);
            }
        });

        statusElement.textContent = `Detected ${data.headers.length} headers`;
        statusElement.className = 'mt-2 text-success small';

    } catch (error) {
        statusElement.textContent = `Error: ${error.message}`;
        statusElement.className = 'mt-2 text-danger small';
        console.error('Header detection error:', error);
    }
});
</script>

<?php include 'templates/footer.php'; ?>

<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';
include 'templates/header.php';

// Get all sources
$sources = $db->query("SELECT id, name FROM account_sources ORDER BY id")->fetchAll(PDO::FETCH_ASSOC);

echo "<h2>Sync All Sources</h2>";
echo "<ul>";

foreach ($sources as $src) {
    echo "<li>Syncing source: <b>" . htmlspecialchars($src['name']) . "</b>... ";
    // Call the Python script, passing the source ID
    $cmd = escapeshellcmd("python3 run_sync.py --source " . intval($src['id']));
    $output = shell_exec($cmd . " 2>&1");
    if (strpos($output, 'completed') !== false || strpos($output, 'Success') !== false) {
        echo "<span style='color:green'>Success</span>";
    } else {
        echo "<span style='color:red'>Failed</span><br><pre>" . htmlspecialchars($output) . "</pre>";
    }
    echo "</li>";
}

echo "</ul>";
echo "<p>All sources processed.</p>";
?><?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);

// Handle sync request
$syncResult = null;
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['sync_source'])) {
    $sourceId = $_POST['source_id'];
    
    // Execute Python sync script
    $command = escapeshellcmd("python3 run_sync.py --source $sourceId");
    $output = shell_exec($command . " 2>&1");
    
    $syncResult = [
        'source_id' => $sourceId,
        'output' => $output
    ];
    
    // Update last sync time in UI
    $stmt = $db->prepare("
        UPDATE account_sources 
        SET last_sync = CURRENT_TIMESTAMP 
        WHERE id = ?
    ");
    $stmt->execute([$sourceId]);
}

// Get all sources
$sources = $db->query("SELECT * FROM account_sources ORDER BY name")->fetchAll(PDO::FETCH_ASSOC);

include 'templates/header.php';
?>

<div class="container mt-4">
    <h2>Manual Synchronization</h2>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    Sync Data Source
                </div>
                <div class="card-body">
                    <form method="POST">
                        <div class="form-group">
                            <label>Select Source</label>
                            <select name="source_id" class="form-control" required>
                                <option value="">-- Select Source --</option>
                                <?php foreach ($sources as $source): ?>
                                <option value="<?= $source['id'] ?>">
                                    <?= htmlspecialchars($source['name']) ?> (<?= $source['type'] ?>)
                                </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <button type="submit" name="sync_source" class="btn btn-primary">
                            <i class="fas fa-sync mr-2"></i> Sync Now
                        </button>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    Sync All Sources
                </div>
                <div class="card-body">
                    <p>Run synchronization for all sources that are due for update.</p>
                    <form method="POST" action="sync_all.php">
                        <button type="submit" name="sync_all" class="btn btn-info">
                            <i class="fas fa-sync-alt mr-2"></i> Sync All
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <?php if ($syncResult): ?>
    <div class="card mt-4">
        <div class="card-header">
            Sync Results for Source #<?= $syncResult['source_id'] ?>
        </div>
        <div class="card-body">
            <pre style="max-height: 300px; overflow: auto;"><?= htmlspecialchars($syncResult['output']) ?></pre>
        </div>
    </div>
    <?php endif; ?>
    
    <div class="card mt-4">
        <div class="card-header">
            Sync Status
        </div>
        <div class="card-body">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Source</th>
                        <th>Type</th>
                        <th>Last Sync</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($sources as $source): 
                        $syncStatus = 'Never run';
                        $statusClass = 'text-muted';
                        
                        if ($source['last_sync']) {
                            $syncStatus = date('M j, Y H:i', strtotime($source['last_sync']));
                            $statusClass = 'text-success';
                            
                            // If sync is older than 1 day
                            if (time() - strtotime($source['last_sync']) > 86400) {
                                $statusClass = 'text-warning';
                            }
                            
                            // If sync is older than 1 week
                            if (time() - strtotime($source['last_sync']) > 604800) {
                                $statusClass = 'text-danger';
                            }
                        }
                    ?>
                    <tr>
                        <td><?= htmlspecialchars($source['name']) ?></td>
                        <td><?= htmlspecialchars($source['type']) ?></td>
                        <td><?= $syncStatus ?></td>
                        <td class="<?= $statusClass ?>">
                            <?php if ($source['last_sync']): ?>
                                <i class="fas fa-check-circle"></i>
                            <?php else: ?>
                                <i class="fas fa-exclamation-circle"></i>
                            <?php endif; ?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    </div>
</div>

<?php include 'templates/footer.php'; ?><?php
require_once 'error_config.php';

error_log("Test error logging");
throw new Exception("Test exception");
?>
<?php
require_once 'config/database.php';
$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Approve Deletion
    if (isset($_POST['approve_deletion'])) {
        $ids = [];
        if (isset($_POST['account_id'])) {
            $ids[] = intval($_POST['account_id']);
        }
        if (isset($_POST['account_ids']) && is_array($_POST['account_ids'])) {
            foreach ($_POST['account_ids'] as $aid) {
                $ids[] = intval($aid);
            }
        }
        if ($ids) {
            $in = implode(',', array_fill(0, count($ids), '?'));
            // Remove accounts and optionally update defunct_users status
            $stmt = $db->prepare("DELETE FROM user_accounts WHERE id IN ($in)");
            $stmt->execute($ids);
            // Optionally, mark defunct_users as deleted if all accounts for user are deleted
            $userStmt = $db->prepare("SELECT user_id FROM user_accounts WHERE id = ? LIMIT 1");
            foreach ($ids as $accountId) {
                $userStmt->execute([$accountId]);
                $userId = $userStmt->fetchColumn();
                if ($userId) {
                    $check = $db->prepare("SELECT COUNT(*) FROM user_accounts WHERE user_id = ?");
                    $check->execute([$userId]);
                    if ($check->fetchColumn() == 0) {
                        // Find defunct_users row by email or employee_id
                        $user = $db->query("SELECT email, employee_id FROM users WHERE id = $userId")->fetch(PDO::FETCH_ASSOC);
                        if ($user) {
                            $upd = $db->prepare("UPDATE defunct_users SET status = 'deleted' WHERE (email = ? OR employee_id = ?)");
                            $upd->execute([$user['email'], $user['employee_id']]);
                        }
                    }
                }
            }
            }
        }
        header('Location: ' . $_SERVER['HTTP_REFERER']);
        exit;
    }
    // Restore
    if (isset($_POST['restore_account'])) {
        $ids = [];
        if (isset($_POST['account_id'])) {
            $ids[] = intval($_POST['account_id']);
        }
        if (isset($_POST['account_ids']) && is_array($_POST['account_ids'])) {
            foreach ($_POST['account_ids'] as $aid) {
                $ids[] = intval($aid);
            }
        }
        if ($ids) {
            $in = implode(',', array_fill(0, count($ids), '?'));
            $stmt = $db->prepare("UPDATE user_accounts SET pending_deletion = 0 WHERE id IN ($in)");
            $stmt->execute($ids);
        }
        header('Location: ' . $_SERVER['HTTP_REFERER']);
        exit;
    }
}
header('Location: index.php');
exit;

<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);

$userId = $_GET['user_id'] ?? ($_GET['id'] ?? 0);

$user = $userManager->getUserWithAccounts($userId);
// Check defunct status
$defunctStatus = null;
$defunctStmt = $db->prepare("SELECT status FROM defunct_users WHERE email = ? OR employee_id = ? LIMIT 1");
$defunctStmt->execute([$user['email'], $user['employee_id']]);
if ($row = $defunctStmt->fetch(PDO::FETCH_ASSOC)) {
    $defunctStatus = $row['status'];
}

if (!$user) {
    header("Location: users.php");
    exit;
}

$fromPending = isset($_GET['pending']) && $_GET['pending'] == 1;

include 'templates/header.php';
?>


<h2>User Details: <?= htmlspecialchars($user['first_name'] . ' ' . $user['last_name']) ?>
    <?php
    // Check if this user has any accounts pending deletion
    $pending = false;
    foreach ($user['accounts'] as $acc) {
        if (isset($acc['id'])) {
            $stmt = $db->prepare("SELECT pending_deletion FROM user_accounts WHERE id = ?");
            $stmt->execute([$acc['id']]);
            if ($stmt->fetchColumn()) {
                $pending = true;
                break;
            }
        }
    }
    if ($pending): ?>
        <span class="badge bg-danger ms-2">Pending Deletion</span>
    <?php endif; ?>
    <?php if ($defunctStatus === 'deleted'): ?>
        <span class="badge bg-secondary ms-2">Deleted</span>
    <?php elseif ($defunctStatus === 'pending'): ?>
        <span class="badge bg-danger ms-2">Defunct (Pending)</span>
    <?php endif; ?>
</h2>

<?php if ($fromPending): ?>
    <div class="alert alert-warning">You are reviewing this user as part of the pending deletions workflow. All accounts from all sources are shown below for admin review.</div>
<?php endif; ?>

<div class="row">
    <div class="col-md-6">
        <h4>Basic Information</h4>
        <table class="table">
            <tr>
                <th>Employee ID</th>
                <td><?= htmlspecialchars($user['employee_id']) ?></td>
            </tr>
            <tr>
                <th>Email</th>
                <td><?= htmlspecialchars($user['email']) ?></td>
            </tr>
            <tr>
                <th>Status</th>
                <td><?= htmlspecialchars($user['status']) ?></td>
            </tr>
        </table>
    </div>
</div>

<h4>Linked Accounts</h4>
<?php if ($pending): ?>
    <div class="alert alert-danger">This user has one or more accounts flagged for deletion. Please review and take action.</div>
    <form method="post" action="user_action.php" class="mb-3">
        <?php foreach ($user['accounts'] as $account): ?>
            <?php
            $is_pending = false;
            if (isset($account['id'])) {
                $stmt = $db->prepare("SELECT pending_deletion FROM user_accounts WHERE id = ?");
                $stmt->execute([$account['id']]);
                if ($stmt->fetchColumn()) {
                    $is_pending = true;
                }
            }
            ?>
            <?php if ($is_pending): ?>
                <input type="hidden" name="account_ids[]" value="<?= $account['id'] ?>">
            <?php endif; ?>
        <?php endforeach; ?>
        <button type="submit" name="approve_deletion" class="btn btn-danger me-2" onclick="return confirm('Approve deletion for all pending accounts for this user?')">Approve Deletion</button>
        <button type="submit" name="restore_account" class="btn btn-success">Restore</button>
    </form>
<?php endif; ?>
<table class="table">
    <thead>
        <tr>
            <th>Source</th>
            <th>Account ID</th>
            <th>Username</th>
            <th>Email</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($user['accounts'] as $account): ?>
        <tr<?php
            $pending = false;
            if (isset($account['id'])) {
                $stmt = $db->prepare("SELECT pending_deletion FROM user_accounts WHERE id = ?");
                $stmt->execute([$account['id']]);
                if ($stmt->fetchColumn()) {
                    $pending = true;
                }
            }
            echo $pending ? ' class="table-danger"' : '';
        ?>>
            <td><?= htmlspecialchars(($account['source_name'] ?? '') . ' (' . ($account['source_type'] ?? '') . ')') ?></td>
            <td><?= htmlspecialchars($account['account_id'] ?? '') ?></td>
            <td><?= htmlspecialchars($account['username'] ?? '') ?></td>
            <td><?= htmlspecialchars($account['email'] ?? '') ?></td>
            <td>
                <?php if ($pending): ?>
                    <span class="badge bg-danger">Pending Deletion</span>
                <?php elseif (isset($account['status'])): ?>
                    <?php 
                    $badgeClass = 'bg-secondary';
                    if ($account['status'] === 'active') {
                        $badgeClass = 'bg-success';
                    } elseif ($account['status'] === 'inactive') {
                        $badgeClass = 'bg-warning';
                    }
                    ?>
                    <span class="badge <?= $badgeClass ?>"><?= htmlspecialchars(ucfirst($account['status'])) ?></span>
                <?php endif; ?>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>

<?php include 'templates/footer.php'; ?>

<?php
require_once 'config/database.php';
require_once 'lib/UserManager.php';
require_once 'lib/CorrelationEngine.php';
include 'templates/header.php';

$db = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPass);
$userManager = new UserManager($db);
$correlationEngine = new CorrelationEngine($db);

// Fetch only active users
$query = "SELECT u.*, GROUP_CONCAT(DISTINCT s.name) as source_names
    FROM users u 
    LEFT JOIN user_accounts ua ON u.id = ua.user_id 
    LEFT JOIN account_sources s ON ua.source_id = s.id 
    WHERE u.status = 'active'
    GROUP BY u.id";

$usersStmt = $db->query($query);
$users = $usersStmt ? $usersStmt->fetchAll(PDO::FETCH_ASSOC) : [];

$errors = [];
$success = '';
$editUser = null;
$searchTerm = '';

if (isset($_GET['delete'])) {
    $deleteId = intval($_GET['delete']);

    // Fetch user info
    $stmt = $db->prepare("SELECT id, employee_id, email FROM users WHERE id=?");
    $stmt->execute([$deleteId]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user) {
        // Set user status to inactive
        $update = $db->prepare("UPDATE users SET status='inactive' WHERE id=?");
        $ok = $update->execute([$deleteId]);

        // Get all source_ids for this user
        $sourceStmt = $db->prepare("SELECT DISTINCT source_id FROM user_accounts WHERE user_id = ?");
        $sourceStmt->execute([$user['id']]);
        $sourceIds = $sourceStmt->fetchAll(PDO::FETCH_COLUMN);
        if (empty($sourceIds)) {
            $sourceIds = [40]; // Default fallback, adjust to your baseline source_id
        }

        $allOk = true;
        foreach ($sourceIds as $sourceId) {
            $defunct = $db->prepare("
                INSERT INTO defunct_users (user_id, source_id, employee_id, email, deleted_at, status)
                VALUES (?, ?, ?, ?, NOW(), 'pending')
                ON DUPLICATE KEY UPDATE status='pending', deleted_at=NOW()
            ");
            $allOk = $allOk && $defunct->execute([$user['id'], $sourceId, $user['employee_id'], $user['email']]);
        }

        if ($ok && $allOk) {
            $success = "User marked as inactive and pending deletion.";
        } else {
            $errors[] = "Failed to mark user as inactive/pending deletion.";
        }
    } else {
        $errors[] = "User not found.";
    }
}


// Handle Edit: Show form
if (isset($_GET['edit'])) {
    $editId = intval($_GET['edit']);
    $stmt = $db->prepare("SELECT * FROM users WHERE id=?");
    $stmt->execute([$editId]);
    $editUser = $stmt->fetch(PDO::FETCH_ASSOC);
    if (!$editUser) {
        $errors[] = "User not found.";
        $editUser = null;
    }
}

// Handle Update
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['update_user'])) {
    $id = intval($_POST['id']);
    $first_name = trim($_POST['first_name']);
    $last_name = trim($_POST['last_name']);
    $email = trim($_POST['email']);
    $supervisor_email = trim($_POST['supervisor_email']);
    $status = trim($_POST['status']);

    // Basic validation
    if (!$first_name || !$last_name || !$email || !$supervisor_email || !$status) {
        $errors[] = "All fields are required.";
    } else {
        $stmt = $db->prepare("UPDATE users SET first_name=?, last_name=?, email=?, supervisor_email=?, status=? WHERE id=?");
        if ($stmt->execute([$first_name, $last_name, $email, $supervisor_email, $status, $id])) {
            $success = "User updated successfully.";
            $editUser = null; // Hide edit form after update
        } else {
            $errors[] = "Failed to update user.";
        }
    }
}

// Handle Search
if (isset($_GET['search'])) {
    $searchTerm = trim($_GET['search']);
}

// Fetch users with optional search filtering
if (!empty($searchTerm)) {
    $sql = "SELECT * FROM users WHERE 
            first_name LIKE ? OR 
            last_name LIKE ? OR 
            email LIKE ? OR 
            employee_id LIKE ? OR 
            CONCAT(first_name, ' ', last_name) LIKE ?
            ORDER BY last_name, first_name";
    $searchPattern = '%' . $searchTerm . '%';
    $stmt = $db->prepare($sql);
    $stmt->execute([$searchPattern, $searchPattern, $searchPattern, $searchPattern, $searchPattern]);
} else {
    $stmt = $db->query("SELECT * FROM users ORDER BY last_name, first_name");
}
$users = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get IDs of users pending deletion
$pendingStmt = $db->query("SELECT DISTINCT user_id FROM user_accounts WHERE status = 'pending_deletion'");
$pendingUserIds = $pendingStmt ? $pendingStmt->fetchAll(PDO::FETCH_COLUMN) : [];
?>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Users</h2>
        <a href="inactive_users.php" class="btn btn-secondary">View Inactive/Deleted Users</a>
    </div>

    <?php if ($errors): ?>
        <div class="alert alert-danger"><?= implode('<br>', $errors) ?></div>
    <?php endif; ?>
    <?php if ($success): ?>
        <div class="alert alert-success"><?= htmlspecialchars($success ?? '') ?></div>
    <?php endif; ?>

    <!-- Search Form -->
    <div class="card mb-4">
        <div class="card-header">Search Users</div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-8">
                    <input type="text" name="search" class="form-control" 
                           placeholder="Search by name, email, or employee ID..." 
                           value="<?= htmlspecialchars($searchTerm ?? '') ?>">
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-primary">Search</button>
                    <?php if (!empty($searchTerm)): ?>
                        <a href="users.php" class="btn btn-secondary">Clear</a>
                    <?php endif; ?>
                </div>
            </form>
        </div>
    </div>

    <?php if ($editUser): ?>
        <!-- Edit User Form -->
        <div class="card mb-4">
            <div class="card-header">Edit User</div>
            <div class="card-body">
                <form method="post" class="row g-3">
                    <input type="hidden" name="id" value="<?= $editUser['id'] ?>">
                    <?php if (!empty($searchTerm)): ?>
                        <input type="hidden" name="search" value="<?= htmlspecialchars($searchTerm ?? '') ?>">
                    <?php endif; ?>
                    <div class="col-md-3">
                        <label class="form-label">First Name</label>
                        <input type="text" name="first_name" class="form-control" required value="<?= htmlspecialchars($editUser['first_name']) ?>">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" name="last_name" class="form-control" required value="<?= htmlspecialchars($editUser['last_name']) ?>">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Email</label>
                        <input type="email" name="email" class="form-control" required value="<?= htmlspecialchars($editUser['email']) ?>">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Supervisor Email</label>
                        <input type="email" name="supervisor_email" class="form-control" required value="<?= htmlspecialchars($editUser['supervisor_email']) ?>">
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">Status</label>
                        <input type="text" name="status" class="form-control" required value="<?= htmlspecialchars($editUser['status']) ?>">
                    </div>
                    <div class="col-12">
                        <button type="submit" name="update_user" class="btn btn-primary">Update</button>
                        <a href="users.php<?= !empty($searchTerm) ? '?search=' . urlencode($searchTerm) : '' ?>" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    <?php endif; ?>

    <!-- Results Summary -->
    <?php if (!empty($searchTerm)): ?>
        <div class="alert alert-info">
            Showing <?= count($users) ?> result(s) for "<?= htmlspecialchars($searchTerm ?? '') ?>"
        </div>
    <?php endif; ?>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th style="width: 15%">Name</th>
                <th style="width: 20%">Email</th>
                <th style="width: 15%">Supervisor Email</th>
                <th style="width: 10%">Status</th>
                <th style="width: 15%">Created Date</th>
                <th style="width: 20%">Actions</th>
            </tr>
        </thead>
        <tbody>
            <?php if (empty($users)): ?>
                <tr>
                    <td colspan="5" class="text-center">
                        <?= !empty($searchTerm) ? 'No users found matching your search.' : 'No users found.' ?>
                    </td>
                </tr>
            <?php else: ?>
                <?php foreach ($users as $user): ?>
                    <tr>
                        <td>
                            <?= htmlspecialchars($user['first_name'] . ' ' . $user['last_name']) ?>
                            <?php if (in_array($user['id'], $pendingUserIds)): ?>
                                <span class="badge bg-danger ms-1">Pending Deletion</span>
                            <?php endif; ?>
                        </td>
                        <td><?= htmlspecialchars($user['email']) ?></td>
                        <td><?= htmlspecialchars($user['supervisor_email'] ?? '') ?></td>
                        <td><?= htmlspecialchars($user['status']) ?></td>
                        <td><?= !empty($user['created_at']) ? date('M j, Y', strtotime($user['created_at'])) : ''  ?></td>
			
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="users.php?edit=<?= $user['id'] ?><?= !empty($searchTerm) ? '&search=' . urlencode($searchTerm) : '' ?>" 
                                   class="btn btn-warning"><i class="fas fa-edit"></i></a>
                                <a href="user_detail.php?id=<?= $user['id'] ?>" 
                                   class="btn btn-info"><i class="fas fa-eye"></i></a>
                                <a href="users.php?delete=<?= $user['id'] ?><?= !empty($searchTerm) ? '&search=' . urlencode($searchTerm) : '' ?>" 
                                   class="btn btn-danger"
                                   onclick="return confirm('Delete this user and all linked accounts?')"><i class="fas fa-trash"></i></a>
                            </div>
                        </td>
                    </tr>
                <?php endforeach; ?>
            <?php endif; ?>
        </tbody>
    </table>
</div>

<?php include 'templates/footer.php'; ?>
import csv
import json
import pymysql

# ---- CONFIG ----
DB_CONFIG = {
    "host": "localhost",
    "user": "root",
    "password": "YOUR_DB_PASSWORD",
    "database": "idmdb"
}
SOURCE_ID = 22  # Change to the account_sources.id you want to update
LOGICAL_FIELDS = ["first_name", "last_name", "email", "username", "employee_id"]

# ---- FUNCTIONS ----
def get_csv_headers(file_path):
    with open(file_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        headers = next(reader)
    return headers

def update_field_mapping(source_id, file_path):
    headers = get_csv_headers(file_path)
    print("\nDetected CSV Headers:", headers)

    mapping = {}
    for logical in LOGICAL_FIELDS:
        print(f"\nEnter the CSV header that matches '{logical}' (or leave blank to skip):")
        user_input = input("> ").strip()
        if user_input:
            mapping[logical] = user_input

    # Fetch existing config
    conn = pymysql.connect(**DB_CONFIG)
    cur = conn.cursor()
    cur.execute("SELECT config FROM account_sources WHERE id=%s", (source_id,))
    row = cur.fetchone()
    if not row:
        print("Source not found!")
        return
    config = json.loads(row[0])

    # Update config
    config["field_mapping"] = mapping

    cur.execute("UPDATE account_sources SET config=%s WHERE id=%s", (json.dumps(config), source_id))
    conn.commit()
    conn.close()

    print("\n✅ field_mapping updated for source", source_id)
    print(json.dumps(mapping, indent=2))

# ---- MAIN ----
if __name__ == "__main__":
    # Load current CSV path from DB
    conn = pymysql.connect(**DB_CONFIG)
    cur = conn.cursor()
    cur.execute("SELECT config FROM account_sources WHERE id=%s", (SOURCE_ID,))
    row = cur.fetchone()
    conn.close()
    if not row:
        print("Source not found!")
    else:
        file_path = json.loads(row[0])["file_path"]
        update_field_mapping(SOURCE_ID, file_path)

import logging

def handle_defunct_users(conn, baseline_accounts, source_id):
    """Detect users missing from baseline or other sources and handle their defunct status."""
    cursor = conn.cursor(dictionary=True)
    total_sources_affected = 0
    
    # For baseline source (SSHRData)
    if source_id == 1:  # Assuming SSHRData has source_id = 1
        # Build set of employee_ids and emails from baseline
        baseline_empids = set()
        baseline_emails = set()
        for acc in baseline_accounts:
            if acc.get('employee_id'): baseline_empids.add(acc['employee_id'])
            if acc.get('email'): baseline_emails.add(acc['email'])

        # Find users in DB not present in baseline
        cursor.execute("SELECT id, employee_id, email FROM users WHERE status = 'active'")
        db_users = cursor.fetchall()
        defunct = []
        
        for user in db_users:
            empid = user.get('employee_id')
            email = user.get('email')
            # Mark as defunct if either employee_id or email is missing from baseline
            if (empid and empid not in baseline_empids) or (email and email not in baseline_emails):
                defunct.append(user)

        # For each defunct user
        for user in defunct:
            # Get all sources where the user has accounts
            cursor.execute("""
                SELECT DISTINCT ua.source_id
                FROM user_accounts ua
                WHERE ua.user_id = %s
            """, (user['id'],))
            sources = cursor.fetchall()
            
            # Add entry to defunct_users for each source
            user_sources = []
            for src in sources:
                cursor.execute("""
                    INSERT INTO defunct_users 
                    (user_id, source_id, employee_id, email, deleted_at, status)
                    VALUES (%s, %s, %s, %s, NOW(), 'pending')
                    ON DUPLICATE KEY UPDATE
                    status = 'pending',
                    deleted_at = NOW()
                """, (user['id'], src['source_id'], user['employee_id'], user['email']))
                user_sources.append(src['source_id'])
                total_sources_affected += 1

            # Delete from users table (will cascade to user_accounts)
            cursor.execute("DELETE FROM users WHERE id = %s", (user['id'],))
            logging.info(f"User {user['email']} ({user['employee_id']}) marked as defunct in sources: {user_sources}")
            
        conn.commit()
        if defunct:
            logging.info(f"Added {len(defunct)} users to defunct_users across {total_sources_affected} source entries.")
            
    else:
        # For non-baseline sources: check if any users in defunct_users are missing from this source
        cursor.execute("""
            SELECT du.user_id, du.source_id, du.email, du.employee_id
            FROM defunct_users du
            WHERE du.source_id = %s AND du.status = 'pending'
        """, (source_id,))
        pending = cursor.fetchall()
        
        for entry in pending:
            # Check if the user's account exists in the current source's data
            found = False
            for acc in baseline_accounts:
                if ((entry['email'] and acc.get('email') == entry['email']) or 
                    (entry['employee_id'] and acc.get('employee_id') == entry['employee_id'])):
                    found = True
                    break
            
            if not found:
                cursor.execute("""
                    UPDATE defunct_users 
                    SET status = 'deleted', deleted_at = NOW()
                    WHERE user_id = %s AND source_id = %s
                """, (entry['user_id'], source_id))
                
                # Remove the account from user_accounts
                cursor.execute("""
                    DELETE FROM user_accounts 
                    WHERE user_id = %s AND source_id = %s
                """, (entry['user_id'], source_id))
                
        conn.commit()
#!/usr/bin/env python3
import sys
import argparse
import mysql.connector
import json
import logging
from datetime import datetime
import os
import re

# Configuration
CONFIG = {
    'db_host': 'localhost',
    'db_name': 'idmdb',
    'db_user': 'idm_user',
    'db_password': 'test123',
    'log_file': '/var/www/html/idmtool/sync.log',
    'default_correlation_field': 'email'
}

def setup_logging():
    """Configure logging"""
    log_dir = os.path.dirname(CONFIG['log_file'])
    if log_dir:
        os.makedirs(log_dir, exist_ok=True)
    logging.basicConfig(
        filename=CONFIG['log_file'],
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logging.getLogger().addHandler(console)
    logging.info('=== Starting Correlation Sync ===')

def get_db_connection():
    """Create database connection"""
    try:
        return mysql.connector.connect(
            host=CONFIG['db_host'],
            database=CONFIG['db_name'],
            user=CONFIG['db_user'],
            password=CONFIG['db_password'],
            autocommit=False
        )
    except Exception as e:
        logging.error(f"Database connection failed: {e}")
        raise

def get_correlation_rules(conn, source_id):
    """Fetch correlation rules from database"""
    cursor = conn.cursor(dictionary=True)
    cursor.execute("""
        SELECT match_field, match_type, priority
        FROM correlation_rules 
        WHERE source_id = %s 
        ORDER BY priority
    """, (source_id,))
    rules = cursor.fetchall()
    logging.info(f"Loaded {len(rules)} correlation rules for source {source_id}")
    return rules

def get_source_config(conn, source_id):
    """Get source configuration with field mappings"""
    cursor = conn.cursor(dictionary=True)
    cursor.execute("""
        SELECT * FROM account_sources 
        WHERE id = %s
    """, (source_id,))
    source = cursor.fetchone()
    if source:
        source['config'] = json.loads(source['config'])
    return source

def load_xml_accounts(file_path, config):
    """Load user accounts from an XML file"""
    import xml.etree.ElementTree as ET
    accounts = []

    if not os.path.exists(file_path):
        logging.error(f"XML file not found: {file_path}")
        return accounts

    try:
        tree = ET.parse(file_path)
        root = tree.getroot()
        
        # Get user elements using XPath
        user_path = config.get('xml_user_path', '//user')
        
        # ElementTree doesn't support full XPath, so we need to handle the path parts
        path_parts = user_path.split('/')
        path_parts = [part for part in path_parts if part] # Remove empty strings from leading/trailing slashes
        
        # Start with root and traverse down
        elements = [root]
        for part in path_parts:
            if part == '':
                continue
            new_elements = []
            for element in elements:
                new_elements.extend(element.findall(part))
            elements = new_elements
        
        field_mappings = {
            'email': config.get('email_field', 'email'),
            'username': config.get('username_field', 'username'),
            'employee_id': config.get('employee_id_field', 'employee_id')
        }
        
        for user in elements:
            account = {}
            for target_field, field_path in field_mappings.items():
                try:
                    # Handle direct child elements
                    if '/' not in field_path:
                        element = user.find(field_path)
                        if element is not None:
                            account[target_field] = element.text or ''
                        continue
                        
                    # Handle nested paths
                    path_parts = field_path.split('/')
                    current = user
                    for part in path_parts:
                        if not part:
                            continue
                        current = current.find(part)
                        if current is None:
                            break
                    if current is not None:
                        account[target_field] = current.text or ''
                except Exception as e:
                    logging.warning(f"Error extracting field {field_path}: {str(e)}")
                    account[target_field] = ''
            
            # Handle additional fields if configured
            additional_fields = config.get('additional_fields', {})
            if additional_fields:
                extra_data = {}
                for field, xpath in additional_fields.items():
                    try:
                        element = user.find(xpath)
                        if element is not None:
                            extra_data[field] = element.text or ''
                    except Exception as e:
                        logging.warning(f"Error extracting additional field {xpath}: {str(e)}")
                if extra_data:
                    account['additional_data'] = json.dumps(extra_data)
            
            accounts.append(account)
        
        logging.info(f"Loaded {len(accounts)} accounts from XML file")
        return accounts
        
    except ET.ParseError as e:
        logging.error(f"Failed to parse XML file: {e}")
        return accounts
    except Exception as e:
        logging.error(f"Error loading XML accounts: {e}")
        return accounts

def load_csv_accounts(file_path, field_mappings):
    """Load and map CSV account data"""
    accounts = []
    try:
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            headers = [h.strip().lower() for h in f.readline().strip().split(',')]
            
            # Create mapping from CSV headers to standard fields
            reverse_mapping = {v: k for k, v in field_mappings.items()}
            
            for line in f:
                values = line.strip().split(',')
                if len(values) != len(headers):
                    continue
                
                account = {}
                for header, value in zip(headers, values):
                    if header in reverse_mapping:
                        account[reverse_mapping[header]] = value.strip()
                    account[header] = value.strip()  # Keep original fields
                
                accounts.append(account)
                
    except Exception as e:
        logging.error(f"CSV processing failed: {str(e)}")
        raise
    
    return accounts

def correlate_accounts(conn, source_id, accounts):
    """Correlate accounts using rules from database"""
    cursor = conn.cursor(dictionary=True)
    rules = get_correlation_rules(conn, source_id)
    correlated = []
    unmatched = []
    
    for account in accounts:
        try:
            matched = False
            account_id = account.get('username') or account.get('email') or str(hash(frozenset(account.items())))
            
            # Try each rule in priority order
            for rule in rules:
                field_value = account.get(rule['match_field'])
                if not field_value:
                    continue
                    
                query = build_correlation_query(rule)
                params = prepare_rule_parameters(field_value, rule)
                
                cursor.execute(query, params)
                user = cursor.fetchone()
                
                if user:
                    correlated.append({
                        'user_id': user['id'],
                        'account_id': account_id,
                        'account_data': account,
                        'matched_by': {
                            'field': rule['match_field'],
                            'type': rule['match_type'],
                            'priority': rule['priority']
                        }
                    })
                    matched = True
                    break
            
            # Fallback to default correlation field if no rules matched
            if not matched and CONFIG['default_correlation_field']:
                field_value = account.get(CONFIG['default_correlation_field'])
                if field_value:
                    cursor.execute(
                        f"SELECT id FROM users WHERE {CONFIG['default_correlation_field']} = %s LIMIT 1",
                        (field_value,)
                    )
                    user = cursor.fetchone()
                    if user:
                        correlated.append({
                            'user_id': user['id'],
                            'account_id': account_id,
                            'account_data': account,
                            'matched_by': {
                                'field': CONFIG['default_correlation_field'],
                                'type': 'default',
                                'priority': 999
                            }
                        })
                        matched = True
            
            if not matched:
                unmatched.append(account)
                
        except Exception as e:
            logging.error(f"Correlation failed for account: {str(e)}")
            unmatched.append(account)
    
    return correlated, unmatched

def build_correlation_query(rule):
    """Build SQL query based on correlation rule"""
    field = rule['match_field']
    if rule['match_type'] == 'exact':
        return f"SELECT id FROM users WHERE {field} = %s LIMIT 1"
    elif rule['match_type'] == 'partial':
        return f"SELECT id FROM users WHERE {field} LIKE %s LIMIT 1"
    elif rule['match_type'] == 'regex':
        return f"SELECT id FROM users WHERE {field} REGEXP %s LIMIT 1"
    else:
        return f"SELECT id FROM users WHERE {field} = %s LIMIT 1"

def prepare_rule_parameters(value, rule):
    """Prepare parameters based on rule type"""
    if rule['match_type'] == 'partial':
        return (f"%{value}%",)
    elif rule['match_type'] == 'regex':
        return (value,)
    else:  # exact
        return (value,)

def save_correlated_accounts(conn, source_id, correlated):
    """Save correlated accounts to database"""
    cursor = conn.cursor()
    for item in correlated:
        try:
            cursor.execute("""
                INSERT INTO user_accounts 
                (user_id, source_id, account_id, username, email, additional_data, matched_by)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                ON DUPLICATE KEY UPDATE
                username = VALUES(username),
                email = VALUES(email),
                additional_data = VALUES(additional_data),
                matched_by = VALUES(matched_by),
                updated_at = NOW()
            """, (
                item['user_id'],
                source_id,
                item['account_id'],
                item['account_data'].get('username'),
                item['account_data'].get('email'),
                json.dumps(item['account_data']),
                json.dumps(item['matched_by'])
            ))
        except Exception as e:
            logging.error(f"Failed to save account: {str(e)}")
            continue
    conn.commit()

def save_uncorrelated_accounts(conn, source_id, unmatched):
    """Save uncorrelated accounts to database"""
    cursor = conn.cursor()
    # Build a set of account_ids for unmatched accounts
    unmatched_ids = set()
    for account in unmatched:
        account_id = account.get('username') or account.get('email') or str(hash(frozenset(account.items())))
        unmatched_ids.add(account_id)

    # Remove any uncorrelated accounts for this source that are no longer unmatched, but do NOT delete those assigned to a role
    if unmatched_ids:
        format_strings = ','.join(['%s'] * len(unmatched_ids))
        cursor.execute(f"""
            DELETE FROM uncorrelated_accounts
            WHERE source_id = %s AND account_id NOT IN ({format_strings}) AND role_account_id IS NULL
        """, tuple([source_id] + list(unmatched_ids)))
    else:
        # If no unmatched accounts, remove all for this source that are not assigned to a role
        cursor.execute("""
            DELETE FROM uncorrelated_accounts WHERE source_id = %s AND role_account_id IS NULL
        """, (source_id,))

    # Insert or update current unmatched accounts
    for account in unmatched:
        try:
            account_id = account.get('username') or account.get('email') or str(hash(frozenset(account.items())))
            # Check if this account already exists and has a role assigned
            cursor.execute("SELECT role_account_id FROM uncorrelated_accounts WHERE source_id = %s AND account_id = %s", (source_id, account_id))
            existing = cursor.fetchone()
            if existing and existing[0]:
                # Preserve the existing role_account_id
                cursor.execute("""
                    UPDATE uncorrelated_accounts SET
                        username = %s,
                        email = %s,
                        account_data = %s,
                        created_at = NOW()
                    WHERE source_id = %s AND account_id = %s
                """, (
                    account.get('username'),
                    account.get('email'),
                    json.dumps(account),
                    source_id,
                    account_id
                ))
            else:
                # Insert or update, allow role_account_id to be set if present
                role_account_id = account.get('role_account_id')
                cursor.execute("""
                    INSERT INTO uncorrelated_accounts
                    (source_id, account_id, username, email, account_data, role_account_id)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                        username = VALUES(username),
                        email = VALUES(email),
                        account_data = VALUES(account_data),
                        role_account_id = VALUES(role_account_id),
                        created_at = NOW()
                """, (
                    source_id,
                    account_id,
                    account.get('username'),
                    account.get('email'),
                    json.dumps(account),
                    role_account_id
                ))
        except Exception as e:
            logging.error(f"Failed to save uncorrelated account: {str(e)}")
            continue
    conn.commit()

def get_role_accounts(conn):
    """Fetch all role accounts"""
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT id, name, description FROM role_accounts ORDER BY name")
    return cursor.fetchall()

def create_role_account(conn, name, description=None):
    """Create a new role account"""
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO role_accounts (name, description) VALUES (%s, %s)
    """, (name, description))
    conn.commit()
    return cursor.lastrowid
# Implementation for baseline user insert
def insert_baseline_users(conn, accounts, source_id):
    cursor = conn.cursor()
    for acc in accounts:
        cursor.execute(
            """
            INSERT INTO users (first_name, last_name, email, employee_id, status, supervisor_email)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                first_name = VALUES(first_name),
                last_name = VALUES(last_name),
                email = VALUES(email),
                status = VALUES(status),
                supervisor_email = VALUES(supervisor_email),
                updated_at = NOW()
            """,
            (
                acc.get('first_name', acc.get('firstname', '')),
                acc.get('last_name', acc.get('lastname', '')),
                acc.get('email', ''),
                acc.get('employee_id', ''),
                acc.get('status', 'active'),
                acc.get('supervisor_email', '')
            )
        )
    conn.commit()

def handle_defunct_users(conn, baseline_accounts, source_id):
    """Detect users missing from baseline or other sources and handle their defunct status."""
    cursor = conn.cursor(dictionary=True)
    
    # For baseline source (SSHRData)
    if source_id == 1:  # Assuming SSHRData has source_id = 1
        # Build set of employee_ids and emails from baseline
        baseline_empids = set()
        baseline_emails = set()
        for acc in baseline_accounts:
            if acc.get('employee_id'): baseline_empids.add(acc['employee_id'])
            if acc.get('email'): baseline_emails.add(acc['email'])

        # Find users in DB not present in baseline
        cursor.execute("SELECT id, employee_id, email FROM users WHERE status = 'active'")
        db_users = cursor.fetchall()
        defunct = []
        
        for user in db_users:
            empid = user.get('employee_id')
            email = user.get('email')
            if (empid and empid not in baseline_empids) and (email and email not in baseline_emails):
                defunct.append(user)

        # For each defunct user
        for user in defunct:
            # Get all sources where the user has accounts
            cursor.execute("""
                SELECT DISTINCT ua.source_id
                FROM user_accounts ua
                WHERE ua.user_id = %s
            """, (user['id'],))
            sources = cursor.fetchall()
            
            # Add entry to defunct_users for each source
            for src in sources:
                cursor.execute("""
                    INSERT INTO defunct_users 
                    (user_id, source_id, employee_id, email, deleted_at, status)
                    VALUES (%s, %s, %s, %s, NOW(), 'pending')
                    ON DUPLICATE KEY UPDATE
                    status = 'pending',
                    deleted_at = NOW()
                """, (user['id'], src['source_id'], user['employee_id'], user['email']))

            # Update user status to inactive instead of deleting
            cursor.execute("UPDATE users SET status = 'inactive' WHERE id = %s", (user['id'],))
            
        conn.commit()
        if defunct:
            logging.info(f"Added {len(defunct)} users to defunct_users table and marked them inactive.")
            
    else:
        # For non-baseline sources: check if any users in defunct_users are missing from this source
        cursor.execute("""
            SELECT du.user_id, du.source_id 
            FROM defunct_users du
            WHERE du.source_id = %s AND du.status = 'pending'
        """, (source_id,))
        pending = cursor.fetchall()
        
        for entry in pending:
            # Check if this user's account exists in the current source's data
            found = False
            cursor.execute("SELECT email, employee_id FROM users WHERE id = %s", (entry['user_id'],))
            user_data = cursor.fetchone()
            if user_data:
                for acc in baseline_accounts:
                    if ((user_data['email'] and acc.get('email') == user_data['email']) or 
                        (user_data['employee_id'] and acc.get('employee_id') == user_data['employee_id'])):
                        found = True
                        break
            
            if not found:
                logging.info(f"User {entry['user_id']} not found in source {source_id}, marking as deleted")
                # Update defunct_users status to deleted
                cursor.execute("""
                    UPDATE defunct_users 
                    SET status = 'deleted', deleted_at = NOW()
                    WHERE user_id = %s AND source_id = %s
                """, (entry['user_id'], source_id))
                
                # Update user_accounts status to deleted (changed from inactive to match the ENUM)
                cursor.execute("""
                    UPDATE user_accounts 
                    SET status = 'deleted', updated_at = NOW()
                    WHERE user_id = %s AND source_id = %s
                """, (entry['user_id'], source_id))
                
                # Commit each update to ensure it's saved
                conn.commit()

def sync_correlation_source(source_id):
    """Main sync function"""
    logging.info(f"Starting correlation sync for source {source_id}")
    conn = None
    try:
        conn = get_db_connection()
        
        # Get source configuration
        source = get_source_config(conn, source_id)
        if not source:
            logging.error(f"Source ID {source_id} not found")
            return False
            
        # Load accounts based on source type
        if source['type'] == 'CSV':
            accounts = load_csv_accounts(
                source['config']['file_path'],
                source['config'].get('field_mapping', {})
            )
        elif source['type'] == 'XML':
            accounts = load_xml_accounts(
                source['config']['file_path'],
                source['config']
            )
        else:
            logging.error(f"Unsupported source type: {source['type']}")
            return False
        
        # === BASELINE LOGIC ===
        if source['is_baseline'] == 1:
            # Baseline: Insert users, skip correlation
            insert_baseline_users(conn, accounts, source_id)
            logging.info(f"Baseline user import completed for {source['name']}: {len(accounts)} users inserted.")

            # Detect and handle defunct users (delete from users, add to defunct_users)
            handle_defunct_users(conn, accounts, source_id)

            # Update last sync time
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE account_sources 
                SET last_sync = NOW() 
                WHERE id = %s
            """, (source_id,))
            conn.commit()
            return True

        # === NON-BASELINE LOGIC: Check for defunct users to mark as deleted ===
        handle_defunct_users(conn, accounts, source_id)
        conn.commit()
        
        # Correlate accounts
        correlated, unmatched = correlate_accounts(conn, source_id, accounts)
        
        # Save results
        save_correlated_accounts(conn, source_id, correlated)
        save_uncorrelated_accounts(conn, source_id, unmatched)
        
        # Update last sync time
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE account_sources 
            SET last_sync = NOW() 
            WHERE id = %s
        """, (source_id,))
        conn.commit()
        
        # Log results
        logging.info(f"""
            Correlation completed for {source['name']}:
            - Accounts processed: {len(accounts)}
            - Successfully correlated: {len(correlated)}
            - Unmatched accounts: {len(unmatched)}
        """)
        return True
    except Exception as e:
        logging.error(f"Sync failed for source {source_id}: {str(e)}", exc_info=True)
        if conn:
            conn.rollback()
        return False
    finally:
        if conn and conn.is_connected():
            conn.close()
        logging.info("Database connection closed")

if __name__ == "__main__":
    setup_logging()
    parser = argparse.ArgumentParser(description='IDM Correlation Sync Tool')
    parser.add_argument('--source', type=int, required=True, help='Source ID to sync')
    args = parser.parse_args()
    success = sync_correlation_source(args.source)
    sys.exit(0 if success else 1)
/*M!999999\- enable the sandbox mode */ 
-- MariaDB dump 10.19-11.6.1-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: idm_tool
-- ------------------------------------------------------
-- Server version	11.6.1-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*M!100616 SET @OLD_NOTE_VERBOSITY=@@NOTE_VERBOSITY, NOTE_VERBOSITY=0 */;

--
-- Table structure for table `account_sources`
--

DROP TABLE IF EXISTS `account_sources`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `account_sources` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `type` enum('LDAP','CSV','Database','Unix','XML','API') NOT NULL,
  `description` text DEFAULT NULL,
  `config` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`config`)),
  `last_sync` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `category` enum('Application','OS','Database') NOT NULL DEFAULT 'Application',
  `is_baseline` tinyint(1) DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `correlation_rules`
--

DROP TABLE IF EXISTS `correlation_rules`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `correlation_rules` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `source_id` int(11) NOT NULL,
  `priority` int(11) NOT NULL,
  `match_field` varchar(100) NOT NULL,
  `match_type` enum('exact','partial','regex') DEFAULT 'exact',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `source_id` (`source_id`),
  CONSTRAINT `correlation_rules_ibfk_1` FOREIGN KEY (`source_id`) REFERENCES `account_sources` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `defunct_users`
--

DROP TABLE IF EXISTS `defunct_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `defunct_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `source_id` int(11) DEFAULT NULL,
  `employee_id` varchar(50) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `deleted_at` timestamp NULL DEFAULT NULL,
  `status` enum('pending','deleted','active','inactive') NOT NULL DEFAULT 'pending',
  `notes` text DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_source_unique` (`user_id`,`source_id`),
  KEY `defunct_users_source_fk` (`source_id`),
  CONSTRAINT `defunct_users_source_fk` FOREIGN KEY (`source_id`) REFERENCES `account_sources` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `permissions`
--

DROP TABLE IF EXISTS `permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `permissions` (
  `permission_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `description` text DEFAULT NULL,
  PRIMARY KEY (`permission_id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `role_accounts`
--

DROP TABLE IF EXISTS `role_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role_accounts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `role_permissions`
--

DROP TABLE IF EXISTS `role_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role_permissions` (
  `role_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`role_id`,`permission_id`),
  KEY `permission_id` (`permission_id`),
  CONSTRAINT `role_permissions_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `roles` (`role_id`) ON DELETE CASCADE,
  CONSTRAINT `role_permissions_ibfk_2` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`permission_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `roles` (
  `role_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `description` text DEFAULT NULL,
  PRIMARY KEY (`role_id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `uncorrelated_accounts`
--

DROP TABLE IF EXISTS `uncorrelated_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `uncorrelated_accounts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `source_id` int(11) NOT NULL,
  `account_id` varchar(255) DEFAULT NULL,
  `username` varchar(100) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `account_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`account_data`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `role_account_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_source_account` (`source_id`,`account_id`),
  KEY `source_id` (`source_id`),
  KEY `role_account_id` (`role_account_id`),
  CONSTRAINT `fk_role_account_id` FOREIGN KEY (`role_account_id`) REFERENCES `role_accounts` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=104 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `user_accounts`
--

DROP TABLE IF EXISTS `user_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_accounts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `source_id` int(11) NOT NULL,
  `account_id` varchar(255) NOT NULL,
  `username` varchar(100) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `additional_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`additional_data`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `matched_by` text DEFAULT NULL,
  `pending_deletion` tinyint(1) DEFAULT 0,
  `status` enum('pending','deleted','active','inactive') NOT NULL DEFAULT 'active',
  PRIMARY KEY (`id`),
  UNIQUE KEY `source_id` (`source_id`,`account_id`),
  KEY `fk_user_accounts_user` (`user_id`),
  CONSTRAINT `fk_user_accounts_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  CONSTRAINT `user_accounts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `user_accounts_ibfk_2` FOREIGN KEY (`source_id`) REFERENCES `account_sources` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8426 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `user_roles`
--

DROP TABLE IF EXISTS `user_roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_roles` (
  `user_id` int(11) NOT NULL,
  `role_id` int(11) NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `user_roles_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `roles` (`role_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `employee_id` varchar(50) DEFAULT NULL,
  `first_name` varchar(100) DEFAULT NULL,
  `last_name` varchar(100) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `status` enum('active','inactive','terminated') DEFAULT 'active',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `employee_id` (`employee_id`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=18831 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `users_auth`
--

DROP TABLE IF EXISTS `users_auth`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users_auth` (
  `auth_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `is_active` tinyint(1) DEFAULT 1,
  `last_login` timestamp NULL DEFAULT NULL,
  `failed_attempts` int(11) DEFAULT 0,
  `locked_until` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`auth_id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*M!100616 SET NOTE_VERBOSITY=@OLD_NOTE_VERBOSITY */;

-- Dump completed on 2025-07-22 16:36:21
